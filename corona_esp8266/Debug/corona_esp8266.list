
corona_esp8266.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f50  08004930  08004930  00014930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005880  08005880  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005880  08005880  00015880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005888  08005888  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005888  08005888  00015888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800588c  0800588c  0001588c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000594  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000060c  2000060c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010ef5  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024b7  00000000  00000000  00030f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b48  00000000  00000000  00033458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a98  00000000  00000000  00033fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021507  00000000  00000000  00034a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f609  00000000  00000000  00055f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5ce5  00000000  00000000  00065548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012b22d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000324c  00000000  00000000  0012b280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004918 	.word	0x08004918

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004918 	.word	0x08004918

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <bufclr>:
#include "stdio.h"
#include "string.h"


void bufclr (char *buf)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	int len = strlen (buf);
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f7ff fe25 	bl	80001d0 <strlen>
 8000586:	4603      	mov	r3, r0
 8000588:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<len; i++) buf[i] = '\0';
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	e007      	b.n	80005a0 <bufclr+0x28>
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	4413      	add	r3, r2
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	3301      	adds	r3, #1
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fa      	ldr	r2, [r7, #12]
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	dbf3      	blt.n	8000590 <bufclr+0x18>
}
 80005a8:	bf00      	nop
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <ESP_Init>:


/*****************************************************************************************************************************************/

void ESP_Init (char *SSID, char *PASSWD)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b096      	sub	sp, #88	; 0x58
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 80005be:	f000 f933 	bl	8000828 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n");
 80005c2:	481e      	ldr	r0, [pc, #120]	; (800063c <ESP_Init+0x88>)
 80005c4:	f000 f9ec 	bl	80009a0 <Uart_sendstring>
	HAL_Delay(5000);
 80005c8:	f241 3088 	movw	r0, #5000	; 0x1388
 80005cc:	f001 f956 	bl	800187c <HAL_Delay>

	/********* AT **********/
	Uart_sendstring("AT\r\n");
 80005d0:	481b      	ldr	r0, [pc, #108]	; (8000640 <ESP_Init+0x8c>)
 80005d2:	f000 f9e5 	bl	80009a0 <Uart_sendstring>
	while(!(Wait_for("AT\r\r\n\r\nOK\r\n")));
 80005d6:	bf00      	nop
 80005d8:	481a      	ldr	r0, [pc, #104]	; (8000644 <ESP_Init+0x90>)
 80005da:	f000 fa85 	bl	8000ae8 <Wait_for>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d0f9      	beq.n	80005d8 <ESP_Init+0x24>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n");
 80005e4:	4818      	ldr	r0, [pc, #96]	; (8000648 <ESP_Init+0x94>)
 80005e6:	f000 f9db 	bl	80009a0 <Uart_sendstring>
	while (!(Wait_for("AT+CWMODE=1\r\r\n\r\nOK\r\n")));
 80005ea:	bf00      	nop
 80005ec:	4817      	ldr	r0, [pc, #92]	; (800064c <ESP_Init+0x98>)
 80005ee:	f000 fa7b 	bl	8000ae8 <Wait_for>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d0f9      	beq.n	80005ec <ESP_Init+0x38>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 80005f8:	f107 0008 	add.w	r0, r7, #8
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	4913      	ldr	r1, [pc, #76]	; (8000650 <ESP_Init+0x9c>)
 8000602:	f003 fd5b 	bl	80040bc <siprintf>
	Uart_sendstring(data);
 8000606:	f107 0308 	add.w	r3, r7, #8
 800060a:	4618      	mov	r0, r3
 800060c:	f000 f9c8 	bl	80009a0 <Uart_sendstring>
	while (!(Wait_for("WIFI GOT IP\r\n\r\nOK\r\n")));
 8000610:	bf00      	nop
 8000612:	4810      	ldr	r0, [pc, #64]	; (8000654 <ESP_Init+0xa0>)
 8000614:	f000 fa68 	bl	8000ae8 <Wait_for>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d0f9      	beq.n	8000612 <ESP_Init+0x5e>

	/********* AT+CIPMUX=0 **********/
	Uart_sendstring("AT+CIPMUX=0\r\n");
 800061e:	480e      	ldr	r0, [pc, #56]	; (8000658 <ESP_Init+0xa4>)
 8000620:	f000 f9be 	bl	80009a0 <Uart_sendstring>
	while (!(Wait_for("AT+CIPMUX=0\r\r\n\r\nOK\r\n")));
 8000624:	bf00      	nop
 8000626:	480d      	ldr	r0, [pc, #52]	; (800065c <ESP_Init+0xa8>)
 8000628:	f000 fa5e 	bl	8000ae8 <Wait_for>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d0f9      	beq.n	8000626 <ESP_Init+0x72>

}
 8000632:	bf00      	nop
 8000634:	bf00      	nop
 8000636:	3758      	adds	r7, #88	; 0x58
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	08004930 	.word	0x08004930
 8000640:	0800493c 	.word	0x0800493c
 8000644:	08004944 	.word	0x08004944
 8000648:	08004950 	.word	0x08004950
 800064c:	08004960 	.word	0x08004960
 8000650:	08004978 	.word	0x08004978
 8000654:	08004990 	.word	0x08004990
 8000658:	080049a4 	.word	0x080049a4
 800065c:	080049b4 	.word	0x080049b4

08000660 <ESP_GetData>:

void ESP_GetData (char *api_key, char *Total, char *Deaths, char *Recovered)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b0a6      	sub	sp, #152	; 0x98
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	607a      	str	r2, [r7, #4]
 800066c:	603b      	str	r3, [r7, #0]
	char local_buf[100] = {0};
 800066e:	2300      	movs	r3, #0
 8000670:	633b      	str	r3, [r7, #48]	; 0x30
 8000672:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000676:	2260      	movs	r2, #96	; 0x60
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f003 fce2 	bl	8004044 <memset>
	char local_buf2[30] = {0};
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
 8000694:	615a      	str	r2, [r3, #20]
 8000696:	831a      	strh	r2, [r3, #24]
	
	Uart_sendstring("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");
 8000698:	485a      	ldr	r0, [pc, #360]	; (8000804 <ESP_GetData+0x1a4>)
 800069a:	f000 f981 	bl	80009a0 <Uart_sendstring>
	while (!(Wait_for("CONNECT\r\n\r\nOK\r\n")));
 800069e:	bf00      	nop
 80006a0:	4859      	ldr	r0, [pc, #356]	; (8000808 <ESP_GetData+0x1a8>)
 80006a2:	f000 fa21 	bl	8000ae8 <Wait_for>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d0f9      	beq.n	80006a0 <ESP_GetData+0x40>
	
	sprintf (local_buf, "GET /apps/thinghttp/send_request?api_key=%s\r\n", api_key);
 80006ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	4956      	ldr	r1, [pc, #344]	; (800080c <ESP_GetData+0x1ac>)
 80006b4:	4618      	mov	r0, r3
 80006b6:	f003 fd01 	bl	80040bc <siprintf>
	int len = strlen (local_buf);
 80006ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff fd86 	bl	80001d0 <strlen>
 80006c4:	4603      	mov	r3, r0
 80006c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	
	sprintf (local_buf2, "AT+CIPSEND=%d\r\n", len);
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80006d2:	494f      	ldr	r1, [pc, #316]	; (8000810 <ESP_GetData+0x1b0>)
 80006d4:	4618      	mov	r0, r3
 80006d6:	f003 fcf1 	bl	80040bc <siprintf>
	Uart_sendstring(local_buf2);
 80006da:	f107 0310 	add.w	r3, r7, #16
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 f95e 	bl	80009a0 <Uart_sendstring>
	while (!(Wait_for(">")));
 80006e4:	bf00      	nop
 80006e6:	484b      	ldr	r0, [pc, #300]	; (8000814 <ESP_GetData+0x1b4>)
 80006e8:	f000 f9fe 	bl	8000ae8 <Wait_for>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0f9      	beq.n	80006e6 <ESP_GetData+0x86>
	
	bufclr(local_buf2);
 80006f2:	f107 0310 	add.w	r3, r7, #16
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff ff3e 	bl	8000578 <bufclr>

	Uart_sendstring (local_buf);
 80006fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000700:	4618      	mov	r0, r3
 8000702:	f000 f94d 	bl	80009a0 <Uart_sendstring>
	while (!(Wait_for("SEND OK\r\n")));
 8000706:	bf00      	nop
 8000708:	4843      	ldr	r0, [pc, #268]	; (8000818 <ESP_GetData+0x1b8>)
 800070a:	f000 f9ed 	bl	8000ae8 <Wait_for>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d0f9      	beq.n	8000708 <ESP_GetData+0xa8>
	

	while (!(Wait_for ("\">")));
 8000714:	bf00      	nop
 8000716:	4841      	ldr	r0, [pc, #260]	; (800081c <ESP_GetData+0x1bc>)
 8000718:	f000 f9e6 	bl	8000ae8 <Wait_for>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d0f9      	beq.n	8000716 <ESP_GetData+0xb6>
	while (!(Copy_upto ("</span>", local_buf2)));
 8000722:	bf00      	nop
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	4619      	mov	r1, r3
 800072a:	483d      	ldr	r0, [pc, #244]	; (8000820 <ESP_GetData+0x1c0>)
 800072c:	f000 f968 	bl	8000a00 <Copy_upto>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d0f6      	beq.n	8000724 <ESP_GetData+0xc4>
	len = strlen (local_buf2);
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff fd48 	bl	80001d0 <strlen>
 8000740:	4603      	mov	r3, r0
 8000742:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	snprintf (Total, len-6,local_buf2);
 8000746:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800074a:	3b06      	subs	r3, #6
 800074c:	4619      	mov	r1, r3
 800074e:	f107 0310 	add.w	r3, r7, #16
 8000752:	461a      	mov	r2, r3
 8000754:	68b8      	ldr	r0, [r7, #8]
 8000756:	f003 fc7d 	bl	8004054 <sniprintf>


	bufclr(local_buf2);
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff0a 	bl	8000578 <bufclr>
	while (!(Wait_for("<span>")));
 8000764:	bf00      	nop
 8000766:	482f      	ldr	r0, [pc, #188]	; (8000824 <ESP_GetData+0x1c4>)
 8000768:	f000 f9be 	bl	8000ae8 <Wait_for>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d0f9      	beq.n	8000766 <ESP_GetData+0x106>
	while (!(Copy_upto ("</span>", local_buf2)));
 8000772:	bf00      	nop
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	4619      	mov	r1, r3
 800077a:	4829      	ldr	r0, [pc, #164]	; (8000820 <ESP_GetData+0x1c0>)
 800077c:	f000 f940 	bl	8000a00 <Copy_upto>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d0f6      	beq.n	8000774 <ESP_GetData+0x114>
	len = strlen (local_buf2);
 8000786:	f107 0310 	add.w	r3, r7, #16
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff fd20 	bl	80001d0 <strlen>
 8000790:	4603      	mov	r3, r0
 8000792:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	snprintf (Deaths, len-6,local_buf2);
 8000796:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800079a:	3b06      	subs	r3, #6
 800079c:	4619      	mov	r1, r3
 800079e:	f107 0310 	add.w	r3, r7, #16
 80007a2:	461a      	mov	r2, r3
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f003 fc55 	bl	8004054 <sniprintf>

	bufclr(local_buf2);
 80007aa:	f107 0310 	add.w	r3, r7, #16
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fee2 	bl	8000578 <bufclr>
	while (!(Wait_for("<span>")));
 80007b4:	bf00      	nop
 80007b6:	481b      	ldr	r0, [pc, #108]	; (8000824 <ESP_GetData+0x1c4>)
 80007b8:	f000 f996 	bl	8000ae8 <Wait_for>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d0f9      	beq.n	80007b6 <ESP_GetData+0x156>
	while (!(Copy_upto ("</span>", local_buf2)));
 80007c2:	bf00      	nop
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	4619      	mov	r1, r3
 80007ca:	4815      	ldr	r0, [pc, #84]	; (8000820 <ESP_GetData+0x1c0>)
 80007cc:	f000 f918 	bl	8000a00 <Copy_upto>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d0f6      	beq.n	80007c4 <ESP_GetData+0x164>
	len = strlen (local_buf2);
 80007d6:	f107 0310 	add.w	r3, r7, #16
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fcf8 	bl	80001d0 <strlen>
 80007e0:	4603      	mov	r3, r0
 80007e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	snprintf (Recovered, len-6,local_buf2);
 80007e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80007ea:	3b06      	subs	r3, #6
 80007ec:	4619      	mov	r1, r3
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	461a      	mov	r2, r3
 80007f4:	6838      	ldr	r0, [r7, #0]
 80007f6:	f003 fc2d 	bl	8004054 <sniprintf>
}
 80007fa:	bf00      	nop
 80007fc:	3798      	adds	r7, #152	; 0x98
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	080049cc 	.word	0x080049cc
 8000808:	080049f8 	.word	0x080049f8
 800080c:	08004a08 	.word	0x08004a08
 8000810:	08004a38 	.word	0x08004a38
 8000814:	08004a48 	.word	0x08004a48
 8000818:	08004a4c 	.word	0x08004a4c
 800081c:	08004a58 	.word	0x08004a58
 8000820:	08004a5c 	.word	0x08004a5c
 8000824:	08004a64 	.word	0x08004a64

08000828 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 800082c:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <Ringbuf_init+0x3c>)
 800082e:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <Ringbuf_init+0x40>)
 8000830:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <Ringbuf_init+0x44>)
 8000834:	4a0e      	ldr	r2, [pc, #56]	; (8000870 <Ringbuf_init+0x48>)
 8000836:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <Ringbuf_init+0x4c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	695a      	ldr	r2, [r3, #20]
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <Ringbuf_init+0x4c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f042 0201 	orr.w	r2, r2, #1
 8000846:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <Ringbuf_init+0x4c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	68da      	ldr	r2, [r3, #12]
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <Ringbuf_init+0x4c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f042 0220 	orr.w	r2, r2, #32
 8000856:	60da      	str	r2, [r3, #12]
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	20000580 	.word	0x20000580
 8000868:	20000094 	.word	0x20000094
 800086c:	2000057c 	.word	0x2000057c
 8000870:	200000dc 	.word	0x200000dc
 8000874:	20000538 	.word	0x20000538

08000878 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	6039      	str	r1, [r7, #0]
 8000882:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000888:	3301      	adds	r3, #1
 800088a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800088e:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	429a      	cmp	r2, r3
 8000898:	d007      	beq.n	80008aa <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	683a      	ldr	r2, [r7, #0]
 80008a0:	79f9      	ldrb	r1, [r7, #7]
 80008a2:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80008a4:	68fa      	ldr	r2, [r7, #12]
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80008aa:	bf00      	nop
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
	...

080008b8 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <Uart_read+0x4c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <Uart_read+0x4c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d102      	bne.n	80008d4 <Uart_read+0x1c>
  {
    return -1;
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295
 80008d2:	e010      	b.n	80008f6 <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 80008d4:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <Uart_read+0x4c>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <Uart_read+0x4c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	5cd3      	ldrb	r3, [r2, r3]
 80008e0:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <Uart_read+0x4c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e8:	1c5a      	adds	r2, r3, #1
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <Uart_read+0x4c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008f2:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 80008f4:	79fb      	ldrb	r3, [r7, #7]
  }
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	20000580 	.word	0x20000580

08000908 <Uart_write>:

void Uart_write(int c)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b00      	cmp	r3, #0
 8000914:	db21      	blt.n	800095a <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <Uart_write+0x60>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	3301      	adds	r3, #1
 800091e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000922:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 8000924:	bf00      	nop
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <Uart_write+0x60>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	429a      	cmp	r2, r3
 8000930:	d0f9      	beq.n	8000926 <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <Uart_write+0x60>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <Uart_write+0x60>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	6879      	ldr	r1, [r7, #4]
 800093e:	b2c9      	uxtb	r1, r1
 8000940:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <Uart_write+0x60>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <Uart_write+0x64>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	68da      	ldr	r2, [r3, #12]
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <Uart_write+0x64>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000958:	60da      	str	r2, [r3, #12]
	}
}
 800095a:	bf00      	nop
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	2000057c 	.word	0x2000057c
 800096c:	20000538 	.word	0x20000538

08000970 <IsDataAvailable>:

int IsDataAvailable(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <IsDataAvailable+0x2c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	b29a      	uxth	r2, r3
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <IsDataAvailable+0x2c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	b29b      	uxth	r3, r3
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	b29b      	uxth	r3, r3
 8000988:	3340      	adds	r3, #64	; 0x40
 800098a:	b29b      	uxth	r3, r3
 800098c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8000990:	4618      	mov	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	20000580 	.word	0x20000580

080009a0 <Uart_sendstring>:

void Uart_sendstring (const char *s)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 80009a8:	e006      	b.n	80009b8 <Uart_sendstring+0x18>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	1c5a      	adds	r2, r3, #1
 80009ae:	607a      	str	r2, [r7, #4]
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff ffa8 	bl	8000908 <Uart_write>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d1f4      	bne.n	80009aa <Uart_sendstring+0xa>
}
 80009c0:	bf00      	nop
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <Uart_peek>:

  while(*s) Uart_write(*s++);
}

int Uart_peek()
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <Uart_peek+0x30>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <Uart_peek+0x30>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009dc:	429a      	cmp	r2, r3
 80009de:	d102      	bne.n	80009e6 <Uart_peek+0x1a>
  {
    return -1;
 80009e0:	f04f 33ff 	mov.w	r3, #4294967295
 80009e4:	e005      	b.n	80009f2 <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 80009e6:	4b05      	ldr	r3, [pc, #20]	; (80009fc <Uart_peek+0x30>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	4b04      	ldr	r3, [pc, #16]	; (80009fc <Uart_peek+0x30>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f0:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	20000580 	.word	0x20000580

08000a00 <Copy_upto>:


int Copy_upto (char *string, char *buffertocopyinto)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff fbde 	bl	80001d0 <strlen>
 8000a14:	4603      	mov	r3, r0
 8000a16:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]

again:
	while (!IsDataAvailable());
 8000a1c:	bf00      	nop
 8000a1e:	f7ff ffa7 	bl	8000970 <IsDataAvailable>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d0fa      	beq.n	8000a1e <Copy_upto+0x1e>
	while (Uart_peek() != string[so_far])
 8000a28:	e01b      	b.n	8000a62 <Copy_upto+0x62>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8000a2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ae4 <Copy_upto+0xe4>)
 8000a2c:	6819      	ldr	r1, [r3, #0]
 8000a2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ae4 <Copy_upto+0xe4>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	6838      	ldr	r0, [r7, #0]
 8000a38:	4403      	add	r3, r0
 8000a3a:	5c8a      	ldrb	r2, [r1, r2]
 8000a3c:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8000a3e:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <Copy_upto+0xe4>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a44:	1c5a      	adds	r2, r3, #1
 8000a46:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <Copy_upto+0xe4>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a4e:	645a      	str	r2, [r3, #68]	; 0x44
			indx++;
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	3301      	adds	r3, #1
 8000a54:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8000a56:	bf00      	nop
 8000a58:	f7ff ff8a 	bl	8000970 <IsDataAvailable>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d0fa      	beq.n	8000a58 <Copy_upto+0x58>
	while (Uart_peek() != string[so_far])
 8000a62:	f7ff ffb3 	bl	80009cc <Uart_peek>
 8000a66:	4601      	mov	r1, r0
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	4299      	cmp	r1, r3
 8000a72:	d1da      	bne.n	8000a2a <Copy_upto+0x2a>

		}
	while (Uart_peek() == string [so_far])
 8000a74:	e019      	b.n	8000aaa <Copy_upto+0xaa>
	{
		so_far++;
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8000a7c:	f7ff ff1c 	bl	80008b8 <Uart_read>
 8000a80:	4601      	mov	r1, r0
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	1c5a      	adds	r2, r3, #1
 8000a86:	613a      	str	r2, [r7, #16]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	b2ca      	uxtb	r2, r1
 8000a90:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8000a92:	697a      	ldr	r2, [r7, #20]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d101      	bne.n	8000a9e <Copy_upto+0x9e>
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e01d      	b.n	8000ada <Copy_upto+0xda>
		while (!IsDataAvailable());
 8000a9e:	bf00      	nop
 8000aa0:	f7ff ff66 	bl	8000970 <IsDataAvailable>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d0fa      	beq.n	8000aa0 <Copy_upto+0xa0>
	while (Uart_peek() == string [so_far])
 8000aaa:	f7ff ff8f 	bl	80009cc <Uart_peek>
 8000aae:	4601      	mov	r1, r0
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4299      	cmp	r1, r3
 8000aba:	d0dc      	beq.n	8000a76 <Copy_upto+0x76>
	}

	if (so_far != len)
 8000abc:	697a      	ldr	r2, [r7, #20]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d002      	beq.n	8000aca <Copy_upto+0xca>
	{
		so_far = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
		goto again;
 8000ac8:	e7a8      	b.n	8000a1c <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8000aca:	697a      	ldr	r2, [r7, #20]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d101      	bne.n	8000ad6 <Copy_upto+0xd6>
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e001      	b.n	8000ada <Copy_upto+0xda>
	else return -1;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000580 	.word	0x20000580

08000ae8 <Wait_for>:
	return 1;
}


int Wait_for (char *string)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff fb6b 	bl	80001d0 <strlen>
 8000afa:	4603      	mov	r3, r0
 8000afc:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 8000afe:	bf00      	nop
 8000b00:	f7ff ff36 	bl	8000970 <IsDataAvailable>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d0fa      	beq.n	8000b00 <Wait_for+0x18>
	if (Uart_peek() != string[so_far])
 8000b0a:	f7ff ff5f 	bl	80009cc <Uart_peek>
 8000b0e:	4601      	mov	r1, r0
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4299      	cmp	r1, r3
 8000b1a:	d01a      	beq.n	8000b52 <Wait_for+0x6a>
	{
		 _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE ;
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <Wait_for+0xa4>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	1c5a      	adds	r2, r3, #1
 8000b24:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <Wait_for+0xa4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000b2c:	645a      	str	r2, [r3, #68]	; 0x44
		goto again;
 8000b2e:	e7e6      	b.n	8000afe <Wait_for+0x16>

	}
	while (Uart_peek() == string [so_far])
	{
		so_far++;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	3301      	adds	r3, #1
 8000b34:	60fb      	str	r3, [r7, #12]
		Uart_read();
 8000b36:	f7ff febf 	bl	80008b8 <Uart_read>
		if (so_far == len) return 1;
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d101      	bne.n	8000b46 <Wait_for+0x5e>
 8000b42:	2301      	movs	r3, #1
 8000b44:	e01d      	b.n	8000b82 <Wait_for+0x9a>
		while (!IsDataAvailable());
 8000b46:	bf00      	nop
 8000b48:	f7ff ff12 	bl	8000970 <IsDataAvailable>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d0fa      	beq.n	8000b48 <Wait_for+0x60>
	while (Uart_peek() == string [so_far])
 8000b52:	f7ff ff3b 	bl	80009cc <Uart_peek>
 8000b56:	4601      	mov	r1, r0
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4299      	cmp	r1, r3
 8000b62:	d0e5      	beq.n	8000b30 <Wait_for+0x48>
	}

	if (so_far != len)
 8000b64:	68fa      	ldr	r2, [r7, #12]
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d002      	beq.n	8000b72 <Wait_for+0x8a>
	{
		so_far = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
		goto again;
 8000b70:	e7c5      	b.n	8000afe <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d101      	bne.n	8000b7e <Wait_for+0x96>
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e001      	b.n	8000b82 <Wait_for+0x9a>
	else return -1;
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000580 	.word	0x20000580

08000b90 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	68db      	ldr	r3, [r3, #12]
 8000ba6:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	f003 0320 	and.w	r3, r3, #32
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d013      	beq.n	8000bda <Uart_isr+0x4a>
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	f003 0320 	and.w	r3, r3, #32
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d00e      	beq.n	8000bda <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <Uart_isr+0xac>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fe50 	bl	8000878 <store_char>
        return;
 8000bd8:	e02c      	b.n	8000c34 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d027      	beq.n	8000c34 <Uart_isr+0xa4>
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d022      	beq.n	8000c34 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <Uart_isr+0xb0>)
 8000bf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <Uart_isr+0xb0>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d108      	bne.n	8000c0c <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	68da      	ldr	r2, [r3, #12]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c08:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8000c0a:	e012      	b.n	8000c32 <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <Uart_isr+0xb0>)
 8000c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c10:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <Uart_isr+0xb0>)
 8000c12:	5cd3      	ldrb	r3, [r2, r3]
 8000c14:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8000c16:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <Uart_isr+0xb0>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c20:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <Uart_isr+0xb0>)
 8000c22:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	7bba      	ldrb	r2, [r7, #14]
 8000c30:	605a      	str	r2, [r3, #4]
    	return;
 8000c32:	bf00      	nop
    }
}
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000580 	.word	0x20000580
 8000c40:	200000dc 	.word	0x200000dc

08000c44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c48:	f000 fda6 	bl	8001798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c4c:	f000 f8a2 	bl	8000d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c50:	f000 f962 	bl	8000f18 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c54:	f000 f908 	bl	8000e68 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000c58:	f000 f934 	bl	8000ec4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
SSD1306_Init();
 8000c5c:	f000 f98a 	bl	8000f74 <SSD1306_Init>
SSD1306_GotoXY(0, 20);
 8000c60:	2114      	movs	r1, #20
 8000c62:	2000      	movs	r0, #0
 8000c64:	f000 faf0 	bl	8001248 <SSD1306_GotoXY>
SSD1306_Puts("Connecting..", &Font_11x18, 1);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	493d      	ldr	r1, [pc, #244]	; (8000d60 <main+0x11c>)
 8000c6c:	483d      	ldr	r0, [pc, #244]	; (8000d64 <main+0x120>)
 8000c6e:	f000 fb81 	bl	8001374 <SSD1306_Puts>
SSD1306_UpdateScreen();
 8000c72:	f000 fa43 	bl	80010fc <SSD1306_UpdateScreen>

ESP_Init("burkes", "1231234b");
 8000c76:	493c      	ldr	r1, [pc, #240]	; (8000d68 <main+0x124>)
 8000c78:	483c      	ldr	r0, [pc, #240]	; (8000d6c <main+0x128>)
 8000c7a:	f7ff fc9b 	bl	80005b4 <ESP_Init>
SSD1306_Clear();
 8000c7e:	f000 fb9e 	bl	80013be <SSD1306_Clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SSD1306_GotoXY (0,0);
 8000c82:	2100      	movs	r1, #0
 8000c84:	2000      	movs	r0, #0
 8000c86:	f000 fadf 	bl	8001248 <SSD1306_GotoXY>
	  	  SSD1306_Puts ("COVID INDIA", &Font_11x18, 1);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4934      	ldr	r1, [pc, #208]	; (8000d60 <main+0x11c>)
 8000c8e:	4838      	ldr	r0, [pc, #224]	; (8000d70 <main+0x12c>)
 8000c90:	f000 fb70 	bl	8001374 <SSD1306_Puts>
	  	  SSD1306_GotoXY (0, 30);
 8000c94:	211e      	movs	r1, #30
 8000c96:	2000      	movs	r0, #0
 8000c98:	f000 fad6 	bl	8001248 <SSD1306_GotoXY>
	  	  SSD1306_Puts ("Live Feed", &Font_11x18, 1);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	4930      	ldr	r1, [pc, #192]	; (8000d60 <main+0x11c>)
 8000ca0:	4834      	ldr	r0, [pc, #208]	; (8000d74 <main+0x130>)
 8000ca2:	f000 fb67 	bl	8001374 <SSD1306_Puts>
	  	  SSD1306_UpdateScreen(); //display
 8000ca6:	f000 fa29 	bl	80010fc <SSD1306_UpdateScreen>

	  	  HAL_Delay (2000);
 8000caa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cae:	f000 fde5 	bl	800187c <HAL_Delay>

	  	  ESP_GetData("E21C5DJM2MYZS9ER", Total, Deaths, Recovered);
 8000cb2:	4b31      	ldr	r3, [pc, #196]	; (8000d78 <main+0x134>)
 8000cb4:	4a31      	ldr	r2, [pc, #196]	; (8000d7c <main+0x138>)
 8000cb6:	4932      	ldr	r1, [pc, #200]	; (8000d80 <main+0x13c>)
 8000cb8:	4832      	ldr	r0, [pc, #200]	; (8000d84 <main+0x140>)
 8000cba:	f7ff fcd1 	bl	8000660 <ESP_GetData>

	  	  SSD1306_Clear();
 8000cbe:	f000 fb7e 	bl	80013be <SSD1306_Clear>

	  	  SSD1306_GotoXY (30,0);
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	201e      	movs	r0, #30
 8000cc6:	f000 fabf 	bl	8001248 <SSD1306_GotoXY>
	        SSD1306_Puts ("TOTAL", &Font_11x18, 1);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4924      	ldr	r1, [pc, #144]	; (8000d60 <main+0x11c>)
 8000cce:	482e      	ldr	r0, [pc, #184]	; (8000d88 <main+0x144>)
 8000cd0:	f000 fb50 	bl	8001374 <SSD1306_Puts>
	        SSD1306_GotoXY (20,30);
 8000cd4:	211e      	movs	r1, #30
 8000cd6:	2014      	movs	r0, #20
 8000cd8:	f000 fab6 	bl	8001248 <SSD1306_GotoXY>
	        SSD1306_Puts(Total, &Font_11x18, 1);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	4920      	ldr	r1, [pc, #128]	; (8000d60 <main+0x11c>)
 8000ce0:	4827      	ldr	r0, [pc, #156]	; (8000d80 <main+0x13c>)
 8000ce2:	f000 fb47 	bl	8001374 <SSD1306_Puts>
	        SSD1306_UpdateScreen(); //display
 8000ce6:	f000 fa09 	bl	80010fc <SSD1306_UpdateScreen>
	        HAL_Delay(5000);  // 2 sec
 8000cea:	f241 3088 	movw	r0, #5000	; 0x1388
 8000cee:	f000 fdc5 	bl	800187c <HAL_Delay>
	        SSD1306_Clear();
 8000cf2:	f000 fb64 	bl	80013be <SSD1306_Clear>

	        SSD1306_GotoXY (20,0);
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2014      	movs	r0, #20
 8000cfa:	f000 faa5 	bl	8001248 <SSD1306_GotoXY>
	        SSD1306_Puts ("DEATHS", &Font_11x18, 1);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4917      	ldr	r1, [pc, #92]	; (8000d60 <main+0x11c>)
 8000d02:	4822      	ldr	r0, [pc, #136]	; (8000d8c <main+0x148>)
 8000d04:	f000 fb36 	bl	8001374 <SSD1306_Puts>
	        SSD1306_GotoXY (30,30);
 8000d08:	211e      	movs	r1, #30
 8000d0a:	201e      	movs	r0, #30
 8000d0c:	f000 fa9c 	bl	8001248 <SSD1306_GotoXY>
	        SSD1306_Puts(Deaths, &Font_11x18, 1);
 8000d10:	2201      	movs	r2, #1
 8000d12:	4913      	ldr	r1, [pc, #76]	; (8000d60 <main+0x11c>)
 8000d14:	4819      	ldr	r0, [pc, #100]	; (8000d7c <main+0x138>)
 8000d16:	f000 fb2d 	bl	8001374 <SSD1306_Puts>
	        SSD1306_UpdateScreen(); //display
 8000d1a:	f000 f9ef 	bl	80010fc <SSD1306_UpdateScreen>
	        HAL_Delay(5000);  // 2 sec
 8000d1e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d22:	f000 fdab 	bl	800187c <HAL_Delay>
	        SSD1306_Clear();
 8000d26:	f000 fb4a 	bl	80013be <SSD1306_Clear>

	        SSD1306_GotoXY (5,0);
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2005      	movs	r0, #5
 8000d2e:	f000 fa8b 	bl	8001248 <SSD1306_GotoXY>
	        SSD1306_Puts ("RECOVERED", &Font_11x18, 1);
 8000d32:	2201      	movs	r2, #1
 8000d34:	490a      	ldr	r1, [pc, #40]	; (8000d60 <main+0x11c>)
 8000d36:	4816      	ldr	r0, [pc, #88]	; (8000d90 <main+0x14c>)
 8000d38:	f000 fb1c 	bl	8001374 <SSD1306_Puts>
	        SSD1306_GotoXY (20,30);
 8000d3c:	211e      	movs	r1, #30
 8000d3e:	2014      	movs	r0, #20
 8000d40:	f000 fa82 	bl	8001248 <SSD1306_GotoXY>
	        SSD1306_Puts(Recovered, &Font_11x18, 1);
 8000d44:	2201      	movs	r2, #1
 8000d46:	4906      	ldr	r1, [pc, #24]	; (8000d60 <main+0x11c>)
 8000d48:	480b      	ldr	r0, [pc, #44]	; (8000d78 <main+0x134>)
 8000d4a:	f000 fb13 	bl	8001374 <SSD1306_Puts>
	        SSD1306_UpdateScreen(); //display
 8000d4e:	f000 f9d5 	bl	80010fc <SSD1306_UpdateScreen>
	        HAL_Delay(5000);  // 2 sec
 8000d52:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d56:	f000 fd91 	bl	800187c <HAL_Delay>
	        SSD1306_Clear();
 8000d5a:	f000 fb30 	bl	80013be <SSD1306_Clear>
	  SSD1306_GotoXY (0,0);
 8000d5e:	e790      	b.n	8000c82 <main+0x3e>
 8000d60:	20000000 	.word	0x20000000
 8000d64:	08004a6c 	.word	0x08004a6c
 8000d68:	08004a7c 	.word	0x08004a7c
 8000d6c:	08004a88 	.word	0x08004a88
 8000d70:	08004a90 	.word	0x08004a90
 8000d74:	08004a9c 	.word	0x08004a9c
 8000d78:	200005ec 	.word	0x200005ec
 8000d7c:	200005e4 	.word	0x200005e4
 8000d80:	200005d8 	.word	0x200005d8
 8000d84:	08004aa8 	.word	0x08004aa8
 8000d88:	08004abc 	.word	0x08004abc
 8000d8c:	08004ac4 	.word	0x08004ac4
 8000d90:	08004acc 	.word	0x08004acc

08000d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b094      	sub	sp, #80	; 0x50
 8000d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9a:	f107 0320 	add.w	r3, r7, #32
 8000d9e:	2230      	movs	r2, #48	; 0x30
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f003 f94e 	bl	8004044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <SystemClock_Config+0xcc>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	4a27      	ldr	r2, [pc, #156]	; (8000e60 <SystemClock_Config+0xcc>)
 8000dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc8:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <SystemClock_Config+0xcc>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <SystemClock_Config+0xd0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <SystemClock_Config+0xd0>)
 8000dde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <SystemClock_Config+0xd0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000df0:	2301      	movs	r3, #1
 8000df2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e04:	2304      	movs	r3, #4
 8000e06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e08:	23a8      	movs	r3, #168	; 0xa8
 8000e0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e10:	2304      	movs	r3, #4
 8000e12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e14:	f107 0320 	add.w	r3, r7, #32
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f001 fe0d 	bl	8002a38 <HAL_RCC_OscConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e24:	f000 f8a0 	bl	8000f68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e28:	230f      	movs	r3, #15
 8000e2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	2105      	movs	r1, #5
 8000e46:	4618      	mov	r0, r3
 8000e48:	f002 f86e 	bl	8002f28 <HAL_RCC_ClockConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e52:	f000 f889 	bl	8000f68 <Error_Handler>
  }
}
 8000e56:	bf00      	nop
 8000e58:	3750      	adds	r7, #80	; 0x50
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40007000 	.word	0x40007000

08000e68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e6e:	4a13      	ldr	r2, [pc, #76]	; (8000ebc <MX_I2C1_Init+0x54>)
 8000e70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e74:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <MX_I2C1_Init+0x58>)
 8000e76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ea4:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <MX_I2C1_Init+0x50>)
 8000ea6:	f001 f84d 	bl	8001f44 <HAL_I2C_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000eb0:	f000 f85a 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000584 	.word	0x20000584
 8000ebc:	40005400 	.word	0x40005400
 8000ec0:	00061a80 	.word	0x00061a80

08000ec4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_USART3_UART_Init+0x4c>)
 8000eca:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <MX_USART3_UART_Init+0x50>)
 8000ecc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <MX_USART3_UART_Init+0x4c>)
 8000ed0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ed4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_USART3_UART_Init+0x4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_USART3_UART_Init+0x4c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <MX_USART3_UART_Init+0x4c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_USART3_UART_Init+0x4c>)
 8000eea:	220c      	movs	r2, #12
 8000eec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <MX_USART3_UART_Init+0x4c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_USART3_UART_Init+0x4c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_USART3_UART_Init+0x4c>)
 8000efc:	f002 fa10 	bl	8003320 <HAL_UART_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f06:	f000 f82f 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000538 	.word	0x20000538
 8000f14:	40004800 	.word	0x40004800

08000f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <MX_GPIO_Init+0x4c>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a0f      	ldr	r2, [pc, #60]	; (8000f64 <MX_GPIO_Init+0x4c>)
 8000f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <MX_GPIO_Init+0x4c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	603b      	str	r3, [r7, #0]
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_GPIO_Init+0x4c>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a08      	ldr	r2, [pc, #32]	; (8000f64 <MX_GPIO_Init+0x4c>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_GPIO_Init+0x4c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	683b      	ldr	r3, [r7, #0]

}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800

08000f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f6c:	b672      	cpsid	i
}
 8000f6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <Error_Handler+0x8>
	...

08000f74 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000f7a:	f000 fa29 	bl	80013d0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000f7e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000f82:	2201      	movs	r2, #1
 8000f84:	2178      	movs	r1, #120	; 0x78
 8000f86:	485b      	ldr	r0, [pc, #364]	; (80010f4 <SSD1306_Init+0x180>)
 8000f88:	f001 fa1e 	bl	80023c8 <HAL_I2C_IsDeviceReady>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e0a9      	b.n	80010ea <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000f96:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000f9a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f9c:	e002      	b.n	8000fa4 <SSD1306_Init+0x30>
		p--;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1f9      	bne.n	8000f9e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000faa:	22ae      	movs	r2, #174	; 0xae
 8000fac:	2100      	movs	r1, #0
 8000fae:	2078      	movs	r0, #120	; 0x78
 8000fb0:	f000 fa6c 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000fb4:	2220      	movs	r2, #32
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2078      	movs	r0, #120	; 0x78
 8000fba:	f000 fa67 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000fbe:	2210      	movs	r2, #16
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2078      	movs	r0, #120	; 0x78
 8000fc4:	f000 fa62 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000fc8:	22b0      	movs	r2, #176	; 0xb0
 8000fca:	2100      	movs	r1, #0
 8000fcc:	2078      	movs	r0, #120	; 0x78
 8000fce:	f000 fa5d 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000fd2:	22c8      	movs	r2, #200	; 0xc8
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2078      	movs	r0, #120	; 0x78
 8000fd8:	f000 fa58 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2078      	movs	r0, #120	; 0x78
 8000fe2:	f000 fa53 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000fe6:	2210      	movs	r2, #16
 8000fe8:	2100      	movs	r1, #0
 8000fea:	2078      	movs	r0, #120	; 0x78
 8000fec:	f000 fa4e 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000ff0:	2240      	movs	r2, #64	; 0x40
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2078      	movs	r0, #120	; 0x78
 8000ff6:	f000 fa49 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000ffa:	2281      	movs	r2, #129	; 0x81
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2078      	movs	r0, #120	; 0x78
 8001000:	f000 fa44 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001004:	22ff      	movs	r2, #255	; 0xff
 8001006:	2100      	movs	r1, #0
 8001008:	2078      	movs	r0, #120	; 0x78
 800100a:	f000 fa3f 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800100e:	22a1      	movs	r2, #161	; 0xa1
 8001010:	2100      	movs	r1, #0
 8001012:	2078      	movs	r0, #120	; 0x78
 8001014:	f000 fa3a 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001018:	22a6      	movs	r2, #166	; 0xa6
 800101a:	2100      	movs	r1, #0
 800101c:	2078      	movs	r0, #120	; 0x78
 800101e:	f000 fa35 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001022:	22a8      	movs	r2, #168	; 0xa8
 8001024:	2100      	movs	r1, #0
 8001026:	2078      	movs	r0, #120	; 0x78
 8001028:	f000 fa30 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800102c:	223f      	movs	r2, #63	; 0x3f
 800102e:	2100      	movs	r1, #0
 8001030:	2078      	movs	r0, #120	; 0x78
 8001032:	f000 fa2b 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001036:	22a4      	movs	r2, #164	; 0xa4
 8001038:	2100      	movs	r1, #0
 800103a:	2078      	movs	r0, #120	; 0x78
 800103c:	f000 fa26 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001040:	22d3      	movs	r2, #211	; 0xd3
 8001042:	2100      	movs	r1, #0
 8001044:	2078      	movs	r0, #120	; 0x78
 8001046:	f000 fa21 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	2078      	movs	r0, #120	; 0x78
 8001050:	f000 fa1c 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001054:	22d5      	movs	r2, #213	; 0xd5
 8001056:	2100      	movs	r1, #0
 8001058:	2078      	movs	r0, #120	; 0x78
 800105a:	f000 fa17 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800105e:	22f0      	movs	r2, #240	; 0xf0
 8001060:	2100      	movs	r1, #0
 8001062:	2078      	movs	r0, #120	; 0x78
 8001064:	f000 fa12 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001068:	22d9      	movs	r2, #217	; 0xd9
 800106a:	2100      	movs	r1, #0
 800106c:	2078      	movs	r0, #120	; 0x78
 800106e:	f000 fa0d 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001072:	2222      	movs	r2, #34	; 0x22
 8001074:	2100      	movs	r1, #0
 8001076:	2078      	movs	r0, #120	; 0x78
 8001078:	f000 fa08 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800107c:	22da      	movs	r2, #218	; 0xda
 800107e:	2100      	movs	r1, #0
 8001080:	2078      	movs	r0, #120	; 0x78
 8001082:	f000 fa03 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001086:	2212      	movs	r2, #18
 8001088:	2100      	movs	r1, #0
 800108a:	2078      	movs	r0, #120	; 0x78
 800108c:	f000 f9fe 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001090:	22db      	movs	r2, #219	; 0xdb
 8001092:	2100      	movs	r1, #0
 8001094:	2078      	movs	r0, #120	; 0x78
 8001096:	f000 f9f9 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800109a:	2220      	movs	r2, #32
 800109c:	2100      	movs	r1, #0
 800109e:	2078      	movs	r0, #120	; 0x78
 80010a0:	f000 f9f4 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80010a4:	228d      	movs	r2, #141	; 0x8d
 80010a6:	2100      	movs	r1, #0
 80010a8:	2078      	movs	r0, #120	; 0x78
 80010aa:	f000 f9ef 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80010ae:	2214      	movs	r2, #20
 80010b0:	2100      	movs	r1, #0
 80010b2:	2078      	movs	r0, #120	; 0x78
 80010b4:	f000 f9ea 	bl	800148c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80010b8:	22af      	movs	r2, #175	; 0xaf
 80010ba:	2100      	movs	r1, #0
 80010bc:	2078      	movs	r0, #120	; 0x78
 80010be:	f000 f9e5 	bl	800148c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80010c2:	222e      	movs	r2, #46	; 0x2e
 80010c4:	2100      	movs	r1, #0
 80010c6:	2078      	movs	r0, #120	; 0x78
 80010c8:	f000 f9e0 	bl	800148c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80010cc:	2000      	movs	r0, #0
 80010ce:	f000 f843 	bl	8001158 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80010d2:	f000 f813 	bl	80010fc <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <SSD1306_Init+0x184>)
 80010d8:	2200      	movs	r2, #0
 80010da:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <SSD1306_Init+0x184>)
 80010de:	2200      	movs	r2, #0
 80010e0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80010e2:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <SSD1306_Init+0x184>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80010e8:	2301      	movs	r3, #1
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000584 	.word	0x20000584
 80010f8:	20000524 	.word	0x20000524

080010fc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001102:	2300      	movs	r3, #0
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	e01d      	b.n	8001144 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	3b50      	subs	r3, #80	; 0x50
 800110c:	b2db      	uxtb	r3, r3
 800110e:	461a      	mov	r2, r3
 8001110:	2100      	movs	r1, #0
 8001112:	2078      	movs	r0, #120	; 0x78
 8001114:	f000 f9ba 	bl	800148c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001118:	2200      	movs	r2, #0
 800111a:	2100      	movs	r1, #0
 800111c:	2078      	movs	r0, #120	; 0x78
 800111e:	f000 f9b5 	bl	800148c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001122:	2210      	movs	r2, #16
 8001124:	2100      	movs	r1, #0
 8001126:	2078      	movs	r0, #120	; 0x78
 8001128:	f000 f9b0 	bl	800148c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	01db      	lsls	r3, r3, #7
 8001130:	4a08      	ldr	r2, [pc, #32]	; (8001154 <SSD1306_UpdateScreen+0x58>)
 8001132:	441a      	add	r2, r3
 8001134:	2380      	movs	r3, #128	; 0x80
 8001136:	2140      	movs	r1, #64	; 0x40
 8001138:	2078      	movs	r0, #120	; 0x78
 800113a:	f000 f95f 	bl	80013fc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	3301      	adds	r3, #1
 8001142:	71fb      	strb	r3, [r7, #7]
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	2b07      	cmp	r3, #7
 8001148:	d9de      	bls.n	8001108 <SSD1306_UpdateScreen+0xc>
	}
}
 800114a:	bf00      	nop
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000124 	.word	0x20000124

08001158 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d101      	bne.n	800116c <SSD1306_Fill+0x14>
 8001168:	2300      	movs	r3, #0
 800116a:	e000      	b.n	800116e <SSD1306_Fill+0x16>
 800116c:	23ff      	movs	r3, #255	; 0xff
 800116e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001172:	4619      	mov	r1, r3
 8001174:	4803      	ldr	r0, [pc, #12]	; (8001184 <SSD1306_Fill+0x2c>)
 8001176:	f002 ff65 	bl	8004044 <memset>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000124 	.word	0x20000124

08001188 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	80fb      	strh	r3, [r7, #6]
 8001192:	460b      	mov	r3, r1
 8001194:	80bb      	strh	r3, [r7, #4]
 8001196:	4613      	mov	r3, r2
 8001198:	70fb      	strb	r3, [r7, #3]
	if (
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	2b7f      	cmp	r3, #127	; 0x7f
 800119e:	d848      	bhi.n	8001232 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80011a0:	88bb      	ldrh	r3, [r7, #4]
 80011a2:	2b3f      	cmp	r3, #63	; 0x3f
 80011a4:	d845      	bhi.n	8001232 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80011a6:	4b26      	ldr	r3, [pc, #152]	; (8001240 <SSD1306_DrawPixel+0xb8>)
 80011a8:	791b      	ldrb	r3, [r3, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d006      	beq.n	80011bc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80011ae:	78fb      	ldrb	r3, [r7, #3]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	bf0c      	ite	eq
 80011b4:	2301      	moveq	r3, #1
 80011b6:	2300      	movne	r3, #0
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80011bc:	78fb      	ldrb	r3, [r7, #3]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d11a      	bne.n	80011f8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80011c2:	88fa      	ldrh	r2, [r7, #6]
 80011c4:	88bb      	ldrh	r3, [r7, #4]
 80011c6:	08db      	lsrs	r3, r3, #3
 80011c8:	b298      	uxth	r0, r3
 80011ca:	4603      	mov	r3, r0
 80011cc:	01db      	lsls	r3, r3, #7
 80011ce:	4413      	add	r3, r2
 80011d0:	4a1c      	ldr	r2, [pc, #112]	; (8001244 <SSD1306_DrawPixel+0xbc>)
 80011d2:	5cd3      	ldrb	r3, [r2, r3]
 80011d4:	b25a      	sxtb	r2, r3
 80011d6:	88bb      	ldrh	r3, [r7, #4]
 80011d8:	f003 0307 	and.w	r3, r3, #7
 80011dc:	2101      	movs	r1, #1
 80011de:	fa01 f303 	lsl.w	r3, r1, r3
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	4313      	orrs	r3, r2
 80011e6:	b259      	sxtb	r1, r3
 80011e8:	88fa      	ldrh	r2, [r7, #6]
 80011ea:	4603      	mov	r3, r0
 80011ec:	01db      	lsls	r3, r3, #7
 80011ee:	4413      	add	r3, r2
 80011f0:	b2c9      	uxtb	r1, r1
 80011f2:	4a14      	ldr	r2, [pc, #80]	; (8001244 <SSD1306_DrawPixel+0xbc>)
 80011f4:	54d1      	strb	r1, [r2, r3]
 80011f6:	e01d      	b.n	8001234 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80011f8:	88fa      	ldrh	r2, [r7, #6]
 80011fa:	88bb      	ldrh	r3, [r7, #4]
 80011fc:	08db      	lsrs	r3, r3, #3
 80011fe:	b298      	uxth	r0, r3
 8001200:	4603      	mov	r3, r0
 8001202:	01db      	lsls	r3, r3, #7
 8001204:	4413      	add	r3, r2
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <SSD1306_DrawPixel+0xbc>)
 8001208:	5cd3      	ldrb	r3, [r2, r3]
 800120a:	b25a      	sxtb	r2, r3
 800120c:	88bb      	ldrh	r3, [r7, #4]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	2101      	movs	r1, #1
 8001214:	fa01 f303 	lsl.w	r3, r1, r3
 8001218:	b25b      	sxtb	r3, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	b25b      	sxtb	r3, r3
 800121e:	4013      	ands	r3, r2
 8001220:	b259      	sxtb	r1, r3
 8001222:	88fa      	ldrh	r2, [r7, #6]
 8001224:	4603      	mov	r3, r0
 8001226:	01db      	lsls	r3, r3, #7
 8001228:	4413      	add	r3, r2
 800122a:	b2c9      	uxtb	r1, r1
 800122c:	4a05      	ldr	r2, [pc, #20]	; (8001244 <SSD1306_DrawPixel+0xbc>)
 800122e:	54d1      	strb	r1, [r2, r3]
 8001230:	e000      	b.n	8001234 <SSD1306_DrawPixel+0xac>
		return;
 8001232:	bf00      	nop
	}
}
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000524 	.word	0x20000524
 8001244:	20000124 	.word	0x20000124

08001248 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	460a      	mov	r2, r1
 8001252:	80fb      	strh	r3, [r7, #6]
 8001254:	4613      	mov	r3, r2
 8001256:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001258:	4a05      	ldr	r2, [pc, #20]	; (8001270 <SSD1306_GotoXY+0x28>)
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800125e:	4a04      	ldr	r2, [pc, #16]	; (8001270 <SSD1306_GotoXY+0x28>)
 8001260:	88bb      	ldrh	r3, [r7, #4]
 8001262:	8053      	strh	r3, [r2, #2]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	20000524 	.word	0x20000524

08001274 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	71fb      	strb	r3, [r7, #7]
 8001280:	4613      	mov	r3, r2
 8001282:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001284:	4b3a      	ldr	r3, [pc, #232]	; (8001370 <SSD1306_Putc+0xfc>)
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	4413      	add	r3, r2
	if (
 8001290:	2b7f      	cmp	r3, #127	; 0x7f
 8001292:	dc07      	bgt.n	80012a4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001294:	4b36      	ldr	r3, [pc, #216]	; (8001370 <SSD1306_Putc+0xfc>)
 8001296:	885b      	ldrh	r3, [r3, #2]
 8001298:	461a      	mov	r2, r3
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	785b      	ldrb	r3, [r3, #1]
 800129e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80012a0:	2b3f      	cmp	r3, #63	; 0x3f
 80012a2:	dd01      	ble.n	80012a8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	e05e      	b.n	8001366 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	e04b      	b.n	8001346 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	3b20      	subs	r3, #32
 80012b6:	6839      	ldr	r1, [r7, #0]
 80012b8:	7849      	ldrb	r1, [r1, #1]
 80012ba:	fb01 f303 	mul.w	r3, r1, r3
 80012be:	4619      	mov	r1, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	440b      	add	r3, r1
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4413      	add	r3, r2
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	e030      	b.n	8001334 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d010      	beq.n	8001304 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80012e2:	4b23      	ldr	r3, [pc, #140]	; (8001370 <SSD1306_Putc+0xfc>)
 80012e4:	881a      	ldrh	r2, [r3, #0]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	4413      	add	r3, r2
 80012ec:	b298      	uxth	r0, r3
 80012ee:	4b20      	ldr	r3, [pc, #128]	; (8001370 <SSD1306_Putc+0xfc>)
 80012f0:	885a      	ldrh	r2, [r3, #2]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	4413      	add	r3, r2
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	79ba      	ldrb	r2, [r7, #6]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f7ff ff43 	bl	8001188 <SSD1306_DrawPixel>
 8001302:	e014      	b.n	800132e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <SSD1306_Putc+0xfc>)
 8001306:	881a      	ldrh	r2, [r3, #0]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	b29b      	uxth	r3, r3
 800130c:	4413      	add	r3, r2
 800130e:	b298      	uxth	r0, r3
 8001310:	4b17      	ldr	r3, [pc, #92]	; (8001370 <SSD1306_Putc+0xfc>)
 8001312:	885a      	ldrh	r2, [r3, #2]
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	b29b      	uxth	r3, r3
 8001318:	4413      	add	r3, r2
 800131a:	b299      	uxth	r1, r3
 800131c:	79bb      	ldrb	r3, [r7, #6]
 800131e:	2b00      	cmp	r3, #0
 8001320:	bf0c      	ite	eq
 8001322:	2301      	moveq	r3, #1
 8001324:	2300      	movne	r3, #0
 8001326:	b2db      	uxtb	r3, r3
 8001328:	461a      	mov	r2, r3
 800132a:	f7ff ff2d 	bl	8001188 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	3301      	adds	r3, #1
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4293      	cmp	r3, r2
 800133e:	d3c8      	bcc.n	80012d2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	3301      	adds	r3, #1
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	785b      	ldrb	r3, [r3, #1]
 800134a:	461a      	mov	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	4293      	cmp	r3, r2
 8001350:	d3ad      	bcc.n	80012ae <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001352:	4b07      	ldr	r3, [pc, #28]	; (8001370 <SSD1306_Putc+0xfc>)
 8001354:	881a      	ldrh	r2, [r3, #0]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b29b      	uxth	r3, r3
 800135c:	4413      	add	r3, r2
 800135e:	b29a      	uxth	r2, r3
 8001360:	4b03      	ldr	r3, [pc, #12]	; (8001370 <SSD1306_Putc+0xfc>)
 8001362:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001364:	79fb      	ldrb	r3, [r7, #7]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000524 	.word	0x20000524

08001374 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	4613      	mov	r3, r2
 8001380:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001382:	e012      	b.n	80013aa <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	79fa      	ldrb	r2, [r7, #7]
 800138a:	68b9      	ldr	r1, [r7, #8]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff71 	bl	8001274 <SSD1306_Putc>
 8001392:	4603      	mov	r3, r0
 8001394:	461a      	mov	r2, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	429a      	cmp	r2, r3
 800139c:	d002      	beq.n	80013a4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	e008      	b.n	80013b6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	3301      	adds	r3, #1
 80013a8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1e8      	bne.n	8001384 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	781b      	ldrb	r3, [r3, #0]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80013c2:	2000      	movs	r0, #0
 80013c4:	f7ff fec8 	bl	8001158 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80013c8:	f7ff fe98 	bl	80010fc <SSD1306_UpdateScreen>
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <ssd1306_I2C_Init+0x28>)
 80013d8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013da:	e002      	b.n	80013e2 <ssd1306_I2C_Init+0x12>
		p--;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f9      	bne.n	80013dc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	0003d090 	.word	0x0003d090

080013fc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80013fc:	b590      	push	{r4, r7, lr}
 80013fe:	b0c7      	sub	sp, #284	; 0x11c
 8001400:	af02      	add	r7, sp, #8
 8001402:	4604      	mov	r4, r0
 8001404:	4608      	mov	r0, r1
 8001406:	4639      	mov	r1, r7
 8001408:	600a      	str	r2, [r1, #0]
 800140a:	4619      	mov	r1, r3
 800140c:	1dfb      	adds	r3, r7, #7
 800140e:	4622      	mov	r2, r4
 8001410:	701a      	strb	r2, [r3, #0]
 8001412:	1dbb      	adds	r3, r7, #6
 8001414:	4602      	mov	r2, r0
 8001416:	701a      	strb	r2, [r3, #0]
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	460a      	mov	r2, r1
 800141c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800141e:	f107 030c 	add.w	r3, r7, #12
 8001422:	1dba      	adds	r2, r7, #6
 8001424:	7812      	ldrb	r2, [r2, #0]
 8001426:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001428:	2300      	movs	r3, #0
 800142a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800142e:	e010      	b.n	8001452 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001430:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001434:	463a      	mov	r2, r7
 8001436:	6812      	ldr	r2, [r2, #0]
 8001438:	441a      	add	r2, r3
 800143a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800143e:	3301      	adds	r3, #1
 8001440:	7811      	ldrb	r1, [r2, #0]
 8001442:	f107 020c 	add.w	r2, r7, #12
 8001446:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001448:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800144c:	3301      	adds	r3, #1
 800144e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001452:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001456:	b29b      	uxth	r3, r3
 8001458:	1d3a      	adds	r2, r7, #4
 800145a:	8812      	ldrh	r2, [r2, #0]
 800145c:	429a      	cmp	r2, r3
 800145e:	d8e7      	bhi.n	8001430 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(I2C, address, dt, count+1, 10);
 8001460:	1dfb      	adds	r3, r7, #7
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	b299      	uxth	r1, r3
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	3301      	adds	r3, #1
 800146c:	b29b      	uxth	r3, r3
 800146e:	f107 020c 	add.w	r2, r7, #12
 8001472:	200a      	movs	r0, #10
 8001474:	9000      	str	r0, [sp, #0]
 8001476:	4804      	ldr	r0, [pc, #16]	; (8001488 <ssd1306_I2C_WriteMulti+0x8c>)
 8001478:	f000 fea8 	bl	80021cc <HAL_I2C_Master_Transmit>
}
 800147c:	bf00      	nop
 800147e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001482:	46bd      	mov	sp, r7
 8001484:	bd90      	pop	{r4, r7, pc}
 8001486:	bf00      	nop
 8001488:	20000584 	.word	0x20000584

0800148c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af02      	add	r7, sp, #8
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
 8001496:	460b      	mov	r3, r1
 8001498:	71bb      	strb	r3, [r7, #6]
 800149a:	4613      	mov	r3, r2
 800149c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800149e:	79bb      	ldrb	r3, [r7, #6]
 80014a0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80014a2:	797b      	ldrb	r3, [r7, #5]
 80014a4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(I2C, address, dt, 2, 10);
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	b299      	uxth	r1, r3
 80014aa:	f107 020c 	add.w	r2, r7, #12
 80014ae:	230a      	movs	r3, #10
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	2302      	movs	r3, #2
 80014b4:	4803      	ldr	r0, [pc, #12]	; (80014c4 <ssd1306_I2C_Write+0x38>)
 80014b6:	f000 fe89 	bl	80021cc <HAL_I2C_Master_Transmit>
}
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000584 	.word	0x20000584

080014c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <HAL_MspInit+0x4c>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	4a0f      	ldr	r2, [pc, #60]	; (8001514 <HAL_MspInit+0x4c>)
 80014d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014dc:	6453      	str	r3, [r2, #68]	; 0x44
 80014de:	4b0d      	ldr	r3, [pc, #52]	; (8001514 <HAL_MspInit+0x4c>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	603b      	str	r3, [r7, #0]
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <HAL_MspInit+0x4c>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	4a08      	ldr	r2, [pc, #32]	; (8001514 <HAL_MspInit+0x4c>)
 80014f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_MspInit+0x4c>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800

08001518 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a19      	ldr	r2, [pc, #100]	; (800159c <HAL_I2C_MspInit+0x84>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d12b      	bne.n	8001592 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <HAL_I2C_MspInit+0x88>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a17      	ldr	r2, [pc, #92]	; (80015a0 <HAL_I2C_MspInit+0x88>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_I2C_MspInit+0x88>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001556:	23c0      	movs	r3, #192	; 0xc0
 8001558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800155a:	2312      	movs	r3, #18
 800155c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001566:	2304      	movs	r3, #4
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	480c      	ldr	r0, [pc, #48]	; (80015a4 <HAL_I2C_MspInit+0x8c>)
 8001572:	f000 fb4b 	bl	8001c0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <HAL_I2C_MspInit+0x88>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	4a08      	ldr	r2, [pc, #32]	; (80015a0 <HAL_I2C_MspInit+0x88>)
 8001580:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001584:	6413      	str	r3, [r2, #64]	; 0x40
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_I2C_MspInit+0x88>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001592:	bf00      	nop
 8001594:	3728      	adds	r7, #40	; 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40005400 	.word	0x40005400
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020400 	.word	0x40020400

080015a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a1d      	ldr	r2, [pc, #116]	; (800163c <HAL_UART_MspInit+0x94>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d134      	bne.n	8001634 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <HAL_UART_MspInit+0x98>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	4a1b      	ldr	r2, [pc, #108]	; (8001640 <HAL_UART_MspInit+0x98>)
 80015d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d8:	6413      	str	r3, [r2, #64]	; 0x40
 80015da:	4b19      	ldr	r3, [pc, #100]	; (8001640 <HAL_UART_MspInit+0x98>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_UART_MspInit+0x98>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a14      	ldr	r2, [pc, #80]	; (8001640 <HAL_UART_MspInit+0x98>)
 80015f0:	f043 0302 	orr.w	r3, r3, #2
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_UART_MspInit+0x98>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001602:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001610:	2303      	movs	r3, #3
 8001612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001614:	2307      	movs	r3, #7
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	4809      	ldr	r0, [pc, #36]	; (8001644 <HAL_UART_MspInit+0x9c>)
 8001620:	f000 faf4 	bl	8001c0c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001624:	2200      	movs	r2, #0
 8001626:	2100      	movs	r1, #0
 8001628:	2027      	movs	r0, #39	; 0x27
 800162a:	f000 fa26 	bl	8001a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800162e:	2027      	movs	r0, #39	; 0x27
 8001630:	f000 fa3f 	bl	8001ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001634:	bf00      	nop
 8001636:	3728      	adds	r7, #40	; 0x28
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40004800 	.word	0x40004800
 8001640:	40023800 	.word	0x40023800
 8001644:	40020400 	.word	0x40020400

08001648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800164c:	e7fe      	b.n	800164c <NMI_Handler+0x4>

0800164e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <HardFault_Handler+0x4>

08001654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <MemManage_Handler+0x4>

0800165a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165e:	e7fe      	b.n	800165e <BusFault_Handler+0x4>

08001660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <UsageFault_Handler+0x4>

08001666 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001694:	f000 f8d2 	bl	800183c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}

0800169c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
Uart_isr(&huart3);
 80016a0:	4803      	ldr	r0, [pc, #12]	; (80016b0 <USART3_IRQHandler+0x14>)
 80016a2:	f7ff fa75 	bl	8000b90 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016a6:	4802      	ldr	r0, [pc, #8]	; (80016b0 <USART3_IRQHandler+0x14>)
 80016a8:	f001 fe88 	bl	80033bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000538 	.word	0x20000538

080016b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016bc:	4a14      	ldr	r2, [pc, #80]	; (8001710 <_sbrk+0x5c>)
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <_sbrk+0x60>)
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <_sbrk+0x64>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <_sbrk+0x64>)
 80016d2:	4a12      	ldr	r2, [pc, #72]	; (800171c <_sbrk+0x68>)
 80016d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <_sbrk+0x64>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d207      	bcs.n	80016f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e4:	f002 fc84 	bl	8003ff0 <__errno>
 80016e8:	4603      	mov	r3, r0
 80016ea:	220c      	movs	r2, #12
 80016ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
 80016f2:	e009      	b.n	8001708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <_sbrk+0x64>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fa:	4b07      	ldr	r3, [pc, #28]	; (8001718 <_sbrk+0x64>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	4a05      	ldr	r2, [pc, #20]	; (8001718 <_sbrk+0x64>)
 8001704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001706:	68fb      	ldr	r3, [r7, #12]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20020000 	.word	0x20020000
 8001714:	00000400 	.word	0x00000400
 8001718:	2000052c 	.word	0x2000052c
 800171c:	20000610 	.word	0x20000610

08001720 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <SystemInit+0x20>)
 8001726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800172a:	4a05      	ldr	r2, [pc, #20]	; (8001740 <SystemInit+0x20>)
 800172c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001730:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001744:	f8df d034 	ldr.w	sp, [pc, #52]	; 800177c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001748:	480d      	ldr	r0, [pc, #52]	; (8001780 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800174a:	490e      	ldr	r1, [pc, #56]	; (8001784 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800174c:	4a0e      	ldr	r2, [pc, #56]	; (8001788 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001750:	e002      	b.n	8001758 <LoopCopyDataInit>

08001752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001756:	3304      	adds	r3, #4

08001758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800175c:	d3f9      	bcc.n	8001752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175e:	4a0b      	ldr	r2, [pc, #44]	; (800178c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001760:	4c0b      	ldr	r4, [pc, #44]	; (8001790 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001764:	e001      	b.n	800176a <LoopFillZerobss>

08001766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001768:	3204      	adds	r2, #4

0800176a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800176c:	d3fb      	bcc.n	8001766 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800176e:	f7ff ffd7 	bl	8001720 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001772:	f002 fc43 	bl	8003ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001776:	f7ff fa65 	bl	8000c44 <main>
  bx  lr    
 800177a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800177c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001784:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001788:	08005890 	.word	0x08005890
  ldr r2, =_sbss
 800178c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001790:	2000060c 	.word	0x2000060c

08001794 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001794:	e7fe      	b.n	8001794 <ADC_IRQHandler>
	...

08001798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800179c:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <HAL_Init+0x40>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0d      	ldr	r2, [pc, #52]	; (80017d8 <HAL_Init+0x40>)
 80017a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017a8:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <HAL_Init+0x40>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <HAL_Init+0x40>)
 80017ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <HAL_Init+0x40>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <HAL_Init+0x40>)
 80017ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c0:	2003      	movs	r0, #3
 80017c2:	f000 f94f 	bl	8001a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017c6:	200f      	movs	r0, #15
 80017c8:	f000 f808 	bl	80017dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017cc:	f7ff fe7c 	bl	80014c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023c00 	.word	0x40023c00

080017dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_InitTick+0x54>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_InitTick+0x58>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4619      	mov	r1, r3
 80017ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f967 	bl	8001ace <HAL_SYSTICK_Config>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e00e      	b.n	8001828 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b0f      	cmp	r3, #15
 800180e:	d80a      	bhi.n	8001826 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001810:	2200      	movs	r2, #0
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	f04f 30ff 	mov.w	r0, #4294967295
 8001818:	f000 f92f 	bl	8001a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800181c:	4a06      	ldr	r2, [pc, #24]	; (8001838 <HAL_InitTick+0x5c>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001822:	2300      	movs	r3, #0
 8001824:	e000      	b.n	8001828 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000008 	.word	0x20000008
 8001834:	20000010 	.word	0x20000010
 8001838:	2000000c 	.word	0x2000000c

0800183c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_IncTick+0x20>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_IncTick+0x24>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4413      	add	r3, r2
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <HAL_IncTick+0x24>)
 800184e:	6013      	str	r3, [r2, #0]
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000010 	.word	0x20000010
 8001860:	200005f8 	.word	0x200005f8

08001864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return uwTick;
 8001868:	4b03      	ldr	r3, [pc, #12]	; (8001878 <HAL_GetTick+0x14>)
 800186a:	681b      	ldr	r3, [r3, #0]
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	200005f8 	.word	0x200005f8

0800187c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001884:	f7ff ffee 	bl	8001864 <HAL_GetTick>
 8001888:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001894:	d005      	beq.n	80018a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <HAL_Delay+0x44>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4413      	add	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018a2:	bf00      	nop
 80018a4:	f7ff ffde 	bl	8001864 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d8f7      	bhi.n	80018a4 <HAL_Delay+0x28>
  {
  }
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000010 	.word	0x20000010

080018c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e0:	4013      	ands	r3, r2
 80018e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f6:	4a04      	ldr	r2, [pc, #16]	; (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	60d3      	str	r3, [r2, #12]
}
 80018fc:	bf00      	nop
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <__NVIC_GetPriorityGrouping+0x18>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	0a1b      	lsrs	r3, r3, #8
 8001916:	f003 0307 	and.w	r3, r3, #7
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	2b00      	cmp	r3, #0
 8001938:	db0b      	blt.n	8001952 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	f003 021f 	and.w	r2, r3, #31
 8001940:	4907      	ldr	r1, [pc, #28]	; (8001960 <__NVIC_EnableIRQ+0x38>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	095b      	lsrs	r3, r3, #5
 8001948:	2001      	movs	r0, #1
 800194a:	fa00 f202 	lsl.w	r2, r0, r2
 800194e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000e100 	.word	0xe000e100

08001964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	6039      	str	r1, [r7, #0]
 800196e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	2b00      	cmp	r3, #0
 8001976:	db0a      	blt.n	800198e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	b2da      	uxtb	r2, r3
 800197c:	490c      	ldr	r1, [pc, #48]	; (80019b0 <__NVIC_SetPriority+0x4c>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	0112      	lsls	r2, r2, #4
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	440b      	add	r3, r1
 8001988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800198c:	e00a      	b.n	80019a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4908      	ldr	r1, [pc, #32]	; (80019b4 <__NVIC_SetPriority+0x50>)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	3b04      	subs	r3, #4
 800199c:	0112      	lsls	r2, r2, #4
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	440b      	add	r3, r1
 80019a2:	761a      	strb	r2, [r3, #24]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000e100 	.word	0xe000e100
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f1c3 0307 	rsb	r3, r3, #7
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	bf28      	it	cs
 80019d6:	2304      	movcs	r3, #4
 80019d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3304      	adds	r3, #4
 80019de:	2b06      	cmp	r3, #6
 80019e0:	d902      	bls.n	80019e8 <NVIC_EncodePriority+0x30>
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3b03      	subs	r3, #3
 80019e6:	e000      	b.n	80019ea <NVIC_EncodePriority+0x32>
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	f04f 32ff 	mov.w	r2, #4294967295
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43da      	mvns	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	401a      	ands	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	43d9      	mvns	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	4313      	orrs	r3, r2
         );
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3724      	adds	r7, #36	; 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a30:	d301      	bcc.n	8001a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a32:	2301      	movs	r3, #1
 8001a34:	e00f      	b.n	8001a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a36:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <SysTick_Config+0x40>)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3e:	210f      	movs	r1, #15
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295
 8001a44:	f7ff ff8e 	bl	8001964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <SysTick_Config+0x40>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4e:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <SysTick_Config+0x40>)
 8001a50:	2207      	movs	r2, #7
 8001a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	e000e010 	.word	0xe000e010

08001a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ff29 	bl	80018c4 <__NVIC_SetPriorityGrouping>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a8c:	f7ff ff3e 	bl	800190c <__NVIC_GetPriorityGrouping>
 8001a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68b9      	ldr	r1, [r7, #8]
 8001a96:	6978      	ldr	r0, [r7, #20]
 8001a98:	f7ff ff8e 	bl	80019b8 <NVIC_EncodePriority>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff5d 	bl	8001964 <__NVIC_SetPriority>
}
 8001aaa:	bf00      	nop
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff31 	bl	8001928 <__NVIC_EnableIRQ>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff ffa2 	bl	8001a20 <SysTick_Config>
 8001adc:	4603      	mov	r3, r0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b084      	sub	sp, #16
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001af4:	f7ff feb6 	bl	8001864 <HAL_GetTick>
 8001af8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d008      	beq.n	8001b18 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2280      	movs	r2, #128	; 0x80
 8001b0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e052      	b.n	8001bbe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0216 	bic.w	r2, r2, #22
 8001b26:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	695a      	ldr	r2, [r3, #20]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b36:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d103      	bne.n	8001b48 <HAL_DMA_Abort+0x62>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d007      	beq.n	8001b58 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0208 	bic.w	r2, r2, #8
 8001b56:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0201 	bic.w	r2, r2, #1
 8001b66:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b68:	e013      	b.n	8001b92 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b6a:	f7ff fe7b 	bl	8001864 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b05      	cmp	r3, #5
 8001b76:	d90c      	bls.n	8001b92 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2203      	movs	r2, #3
 8001b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e015      	b.n	8001bbe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1e4      	bne.n	8001b6a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba4:	223f      	movs	r2, #63	; 0x3f
 8001ba6:	409a      	lsls	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d004      	beq.n	8001be4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2280      	movs	r2, #128	; 0x80
 8001bde:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e00c      	b.n	8001bfe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2205      	movs	r2, #5
 8001be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0201 	bic.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	; 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
 8001c26:	e16b      	b.n	8001f00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	f040 815a 	bne.w	8001efa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d005      	beq.n	8001c5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d130      	bne.n	8001cc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	2203      	movs	r2, #3
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c94:	2201      	movs	r2, #1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	091b      	lsrs	r3, r3, #4
 8001caa:	f003 0201 	and.w	r2, r3, #1
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d017      	beq.n	8001cfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d123      	bne.n	8001d50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	08da      	lsrs	r2, r3, #3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3208      	adds	r2, #8
 8001d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	220f      	movs	r2, #15
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	08da      	lsrs	r2, r3, #3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3208      	adds	r2, #8
 8001d4a:	69b9      	ldr	r1, [r7, #24]
 8001d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0203 	and.w	r2, r3, #3
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 80b4 	beq.w	8001efa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b60      	ldr	r3, [pc, #384]	; (8001f18 <HAL_GPIO_Init+0x30c>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	4a5f      	ldr	r2, [pc, #380]	; (8001f18 <HAL_GPIO_Init+0x30c>)
 8001d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da0:	6453      	str	r3, [r2, #68]	; 0x44
 8001da2:	4b5d      	ldr	r3, [pc, #372]	; (8001f18 <HAL_GPIO_Init+0x30c>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dae:	4a5b      	ldr	r2, [pc, #364]	; (8001f1c <HAL_GPIO_Init+0x310>)
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	089b      	lsrs	r3, r3, #2
 8001db4:	3302      	adds	r3, #2
 8001db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	220f      	movs	r2, #15
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a52      	ldr	r2, [pc, #328]	; (8001f20 <HAL_GPIO_Init+0x314>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d02b      	beq.n	8001e32 <HAL_GPIO_Init+0x226>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a51      	ldr	r2, [pc, #324]	; (8001f24 <HAL_GPIO_Init+0x318>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d025      	beq.n	8001e2e <HAL_GPIO_Init+0x222>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a50      	ldr	r2, [pc, #320]	; (8001f28 <HAL_GPIO_Init+0x31c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d01f      	beq.n	8001e2a <HAL_GPIO_Init+0x21e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4f      	ldr	r2, [pc, #316]	; (8001f2c <HAL_GPIO_Init+0x320>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d019      	beq.n	8001e26 <HAL_GPIO_Init+0x21a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4e      	ldr	r2, [pc, #312]	; (8001f30 <HAL_GPIO_Init+0x324>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d013      	beq.n	8001e22 <HAL_GPIO_Init+0x216>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4d      	ldr	r2, [pc, #308]	; (8001f34 <HAL_GPIO_Init+0x328>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00d      	beq.n	8001e1e <HAL_GPIO_Init+0x212>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4c      	ldr	r2, [pc, #304]	; (8001f38 <HAL_GPIO_Init+0x32c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d007      	beq.n	8001e1a <HAL_GPIO_Init+0x20e>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4b      	ldr	r2, [pc, #300]	; (8001f3c <HAL_GPIO_Init+0x330>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d101      	bne.n	8001e16 <HAL_GPIO_Init+0x20a>
 8001e12:	2307      	movs	r3, #7
 8001e14:	e00e      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e16:	2308      	movs	r3, #8
 8001e18:	e00c      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e1a:	2306      	movs	r3, #6
 8001e1c:	e00a      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e1e:	2305      	movs	r3, #5
 8001e20:	e008      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e22:	2304      	movs	r3, #4
 8001e24:	e006      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e26:	2303      	movs	r3, #3
 8001e28:	e004      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e002      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <HAL_GPIO_Init+0x228>
 8001e32:	2300      	movs	r3, #0
 8001e34:	69fa      	ldr	r2, [r7, #28]
 8001e36:	f002 0203 	and.w	r2, r2, #3
 8001e3a:	0092      	lsls	r2, r2, #2
 8001e3c:	4093      	lsls	r3, r2
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e44:	4935      	ldr	r1, [pc, #212]	; (8001f1c <HAL_GPIO_Init+0x310>)
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	089b      	lsrs	r3, r3, #2
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e52:	4b3b      	ldr	r3, [pc, #236]	; (8001f40 <HAL_GPIO_Init+0x334>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e76:	4a32      	ldr	r2, [pc, #200]	; (8001f40 <HAL_GPIO_Init+0x334>)
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e7c:	4b30      	ldr	r3, [pc, #192]	; (8001f40 <HAL_GPIO_Init+0x334>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ea0:	4a27      	ldr	r2, [pc, #156]	; (8001f40 <HAL_GPIO_Init+0x334>)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ea6:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <HAL_GPIO_Init+0x334>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eca:	4a1d      	ldr	r2, [pc, #116]	; (8001f40 <HAL_GPIO_Init+0x334>)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <HAL_GPIO_Init+0x334>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ef4:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <HAL_GPIO_Init+0x334>)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3301      	adds	r3, #1
 8001efe:	61fb      	str	r3, [r7, #28]
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	2b0f      	cmp	r3, #15
 8001f04:	f67f ae90 	bls.w	8001c28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f08:	bf00      	nop
 8001f0a:	bf00      	nop
 8001f0c:	3724      	adds	r7, #36	; 0x24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40013800 	.word	0x40013800
 8001f20:	40020000 	.word	0x40020000
 8001f24:	40020400 	.word	0x40020400
 8001f28:	40020800 	.word	0x40020800
 8001f2c:	40020c00 	.word	0x40020c00
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40021400 	.word	0x40021400
 8001f38:	40021800 	.word	0x40021800
 8001f3c:	40021c00 	.word	0x40021c00
 8001f40:	40013c00 	.word	0x40013c00

08001f44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e12b      	b.n	80021ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d106      	bne.n	8001f70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff fad4 	bl	8001518 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2224      	movs	r2, #36	; 0x24
 8001f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0201 	bic.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fa6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fa8:	f001 f992 	bl	80032d0 <HAL_RCC_GetPCLK1Freq>
 8001fac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	4a81      	ldr	r2, [pc, #516]	; (80021b8 <HAL_I2C_Init+0x274>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d807      	bhi.n	8001fc8 <HAL_I2C_Init+0x84>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4a80      	ldr	r2, [pc, #512]	; (80021bc <HAL_I2C_Init+0x278>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	bf94      	ite	ls
 8001fc0:	2301      	movls	r3, #1
 8001fc2:	2300      	movhi	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	e006      	b.n	8001fd6 <HAL_I2C_Init+0x92>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4a7d      	ldr	r2, [pc, #500]	; (80021c0 <HAL_I2C_Init+0x27c>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	bf94      	ite	ls
 8001fd0:	2301      	movls	r3, #1
 8001fd2:	2300      	movhi	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e0e7      	b.n	80021ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4a78      	ldr	r2, [pc, #480]	; (80021c4 <HAL_I2C_Init+0x280>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	0c9b      	lsrs	r3, r3, #18
 8001fe8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	4a6a      	ldr	r2, [pc, #424]	; (80021b8 <HAL_I2C_Init+0x274>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d802      	bhi.n	8002018 <HAL_I2C_Init+0xd4>
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	3301      	adds	r3, #1
 8002016:	e009      	b.n	800202c <HAL_I2C_Init+0xe8>
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800201e:	fb02 f303 	mul.w	r3, r2, r3
 8002022:	4a69      	ldr	r2, [pc, #420]	; (80021c8 <HAL_I2C_Init+0x284>)
 8002024:	fba2 2303 	umull	r2, r3, r2, r3
 8002028:	099b      	lsrs	r3, r3, #6
 800202a:	3301      	adds	r3, #1
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6812      	ldr	r2, [r2, #0]
 8002030:	430b      	orrs	r3, r1
 8002032:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800203e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	495c      	ldr	r1, [pc, #368]	; (80021b8 <HAL_I2C_Init+0x274>)
 8002048:	428b      	cmp	r3, r1
 800204a:	d819      	bhi.n	8002080 <HAL_I2C_Init+0x13c>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1e59      	subs	r1, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fbb1 f3f3 	udiv	r3, r1, r3
 800205a:	1c59      	adds	r1, r3, #1
 800205c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002060:	400b      	ands	r3, r1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <HAL_I2C_Init+0x138>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1e59      	subs	r1, r3, #1
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fbb1 f3f3 	udiv	r3, r1, r3
 8002074:	3301      	adds	r3, #1
 8002076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800207a:	e051      	b.n	8002120 <HAL_I2C_Init+0x1dc>
 800207c:	2304      	movs	r3, #4
 800207e:	e04f      	b.n	8002120 <HAL_I2C_Init+0x1dc>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d111      	bne.n	80020ac <HAL_I2C_Init+0x168>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	1e58      	subs	r0, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6859      	ldr	r1, [r3, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	440b      	add	r3, r1
 8002096:	fbb0 f3f3 	udiv	r3, r0, r3
 800209a:	3301      	adds	r3, #1
 800209c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	bf0c      	ite	eq
 80020a4:	2301      	moveq	r3, #1
 80020a6:	2300      	movne	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	e012      	b.n	80020d2 <HAL_I2C_Init+0x18e>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1e58      	subs	r0, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6859      	ldr	r1, [r3, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	0099      	lsls	r1, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	fbb0 f3f3 	udiv	r3, r0, r3
 80020c2:	3301      	adds	r3, #1
 80020c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	bf0c      	ite	eq
 80020cc:	2301      	moveq	r3, #1
 80020ce:	2300      	movne	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_I2C_Init+0x196>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e022      	b.n	8002120 <HAL_I2C_Init+0x1dc>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10e      	bne.n	8002100 <HAL_I2C_Init+0x1bc>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1e58      	subs	r0, r3, #1
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6859      	ldr	r1, [r3, #4]
 80020ea:	460b      	mov	r3, r1
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	440b      	add	r3, r1
 80020f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80020f4:	3301      	adds	r3, #1
 80020f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020fe:	e00f      	b.n	8002120 <HAL_I2C_Init+0x1dc>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	1e58      	subs	r0, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6859      	ldr	r1, [r3, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	0099      	lsls	r1, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	fbb0 f3f3 	udiv	r3, r0, r3
 8002116:	3301      	adds	r3, #1
 8002118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800211c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	6809      	ldr	r1, [r1, #0]
 8002124:	4313      	orrs	r3, r2
 8002126:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69da      	ldr	r2, [r3, #28]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800214e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6911      	ldr	r1, [r2, #16]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68d2      	ldr	r2, [r2, #12]
 800215a:	4311      	orrs	r1, r2
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	430b      	orrs	r3, r1
 8002162:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695a      	ldr	r2, [r3, #20]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2220      	movs	r2, #32
 800219a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	000186a0 	.word	0x000186a0
 80021bc:	001e847f 	.word	0x001e847f
 80021c0:	003d08ff 	.word	0x003d08ff
 80021c4:	431bde83 	.word	0x431bde83
 80021c8:	10624dd3 	.word	0x10624dd3

080021cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af02      	add	r7, sp, #8
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	461a      	mov	r2, r3
 80021d8:	460b      	mov	r3, r1
 80021da:	817b      	strh	r3, [r7, #10]
 80021dc:	4613      	mov	r3, r2
 80021de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021e0:	f7ff fb40 	bl	8001864 <HAL_GetTick>
 80021e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b20      	cmp	r3, #32
 80021f0:	f040 80e0 	bne.w	80023b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	2319      	movs	r3, #25
 80021fa:	2201      	movs	r2, #1
 80021fc:	4970      	ldr	r1, [pc, #448]	; (80023c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f000 fa92 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800220a:	2302      	movs	r3, #2
 800220c:	e0d3      	b.n	80023b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002214:	2b01      	cmp	r3, #1
 8002216:	d101      	bne.n	800221c <HAL_I2C_Master_Transmit+0x50>
 8002218:	2302      	movs	r3, #2
 800221a:	e0cc      	b.n	80023b6 <HAL_I2C_Master_Transmit+0x1ea>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b01      	cmp	r3, #1
 8002230:	d007      	beq.n	8002242 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f042 0201 	orr.w	r2, r2, #1
 8002240:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002250:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2221      	movs	r2, #33	; 0x21
 8002256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2210      	movs	r2, #16
 800225e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	893a      	ldrh	r2, [r7, #8]
 8002272:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002278:	b29a      	uxth	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4a50      	ldr	r2, [pc, #320]	; (80023c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002282:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002284:	8979      	ldrh	r1, [r7, #10]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	6a3a      	ldr	r2, [r7, #32]
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f9ca 	bl	8002624 <I2C_MasterRequestWrite>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e08d      	b.n	80023b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022b0:	e066      	b.n	8002380 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	6a39      	ldr	r1, [r7, #32]
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 fb0c 	bl	80028d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00d      	beq.n	80022de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d107      	bne.n	80022da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e06b      	b.n	80023b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	781a      	ldrb	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002306:	3b01      	subs	r3, #1
 8002308:	b29a      	uxth	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b04      	cmp	r3, #4
 800231a:	d11b      	bne.n	8002354 <HAL_I2C_Master_Transmit+0x188>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002320:	2b00      	cmp	r3, #0
 8002322:	d017      	beq.n	8002354 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	781a      	ldrb	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233e:	b29b      	uxth	r3, r3
 8002340:	3b01      	subs	r3, #1
 8002342:	b29a      	uxth	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234c:	3b01      	subs	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	6a39      	ldr	r1, [r7, #32]
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 fafc 	bl	8002956 <I2C_WaitOnBTFFlagUntilTimeout>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00d      	beq.n	8002380 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	2b04      	cmp	r3, #4
 800236a:	d107      	bne.n	800237c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800237a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e01a      	b.n	80023b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002384:	2b00      	cmp	r3, #0
 8002386:	d194      	bne.n	80022b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002396:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2220      	movs	r2, #32
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	e000      	b.n	80023b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023b4:	2302      	movs	r3, #2
  }
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	00100002 	.word	0x00100002
 80023c4:	ffff0000 	.word	0xffff0000

080023c8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08a      	sub	sp, #40	; 0x28
 80023cc:	af02      	add	r7, sp, #8
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	607a      	str	r2, [r7, #4]
 80023d2:	603b      	str	r3, [r7, #0]
 80023d4:	460b      	mov	r3, r1
 80023d6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80023d8:	f7ff fa44 	bl	8001864 <HAL_GetTick>
 80023dc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80023de:	2301      	movs	r3, #1
 80023e0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b20      	cmp	r3, #32
 80023ec:	f040 8111 	bne.w	8002612 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	2319      	movs	r3, #25
 80023f6:	2201      	movs	r2, #1
 80023f8:	4988      	ldr	r1, [pc, #544]	; (800261c <HAL_I2C_IsDeviceReady+0x254>)
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 f994 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002406:	2302      	movs	r3, #2
 8002408:	e104      	b.n	8002614 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_I2C_IsDeviceReady+0x50>
 8002414:	2302      	movs	r3, #2
 8002416:	e0fd      	b.n	8002614 <HAL_I2C_IsDeviceReady+0x24c>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b01      	cmp	r3, #1
 800242c:	d007      	beq.n	800243e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 0201 	orr.w	r2, r2, #1
 800243c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800244c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2224      	movs	r2, #36	; 0x24
 8002452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4a70      	ldr	r2, [pc, #448]	; (8002620 <HAL_I2C_IsDeviceReady+0x258>)
 8002460:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002470:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	2200      	movs	r2, #0
 800247a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 f952 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00d      	beq.n	80024a6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002498:	d103      	bne.n	80024a2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024a0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e0b6      	b.n	8002614 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024a6:	897b      	ldrh	r3, [r7, #10]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	461a      	mov	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024b4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80024b6:	f7ff f9d5 	bl	8001864 <HAL_GetTick>
 80024ba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	bf0c      	ite	eq
 80024ca:	2301      	moveq	r3, #1
 80024cc:	2300      	movne	r3, #0
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e0:	bf0c      	ite	eq
 80024e2:	2301      	moveq	r3, #1
 80024e4:	2300      	movne	r3, #0
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80024ea:	e025      	b.n	8002538 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024ec:	f7ff f9ba 	bl	8001864 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d302      	bcc.n	8002502 <HAL_I2C_IsDeviceReady+0x13a>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d103      	bne.n	800250a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	22a0      	movs	r2, #160	; 0xa0
 8002506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b02      	cmp	r3, #2
 8002516:	bf0c      	ite	eq
 8002518:	2301      	moveq	r3, #1
 800251a:	2300      	movne	r3, #0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800252e:	bf0c      	ite	eq
 8002530:	2301      	moveq	r3, #1
 8002532:	2300      	movne	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2ba0      	cmp	r3, #160	; 0xa0
 8002542:	d005      	beq.n	8002550 <HAL_I2C_IsDeviceReady+0x188>
 8002544:	7dfb      	ldrb	r3, [r7, #23]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d102      	bne.n	8002550 <HAL_I2C_IsDeviceReady+0x188>
 800254a:	7dbb      	ldrb	r3, [r7, #22]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0cd      	beq.n	80024ec <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2220      	movs	r2, #32
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b02      	cmp	r3, #2
 8002564:	d129      	bne.n	80025ba <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002574:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	2319      	movs	r3, #25
 8002592:	2201      	movs	r2, #1
 8002594:	4921      	ldr	r1, [pc, #132]	; (800261c <HAL_I2C_IsDeviceReady+0x254>)
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 f8c6 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e036      	b.n	8002614 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2220      	movs	r2, #32
 80025aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	e02c      	b.n	8002614 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025d2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	2319      	movs	r3, #25
 80025da:	2201      	movs	r2, #1
 80025dc:	490f      	ldr	r1, [pc, #60]	; (800261c <HAL_I2C_IsDeviceReady+0x254>)
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 f8a2 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e012      	b.n	8002614 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	3301      	adds	r3, #1
 80025f2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	f4ff af32 	bcc.w	8002462 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2220      	movs	r2, #32
 8002602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002612:	2302      	movs	r3, #2
  }
}
 8002614:	4618      	mov	r0, r3
 8002616:	3720      	adds	r7, #32
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	00100002 	.word	0x00100002
 8002620:	ffff0000 	.word	0xffff0000

08002624 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af02      	add	r7, sp, #8
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	607a      	str	r2, [r7, #4]
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	460b      	mov	r3, r1
 8002632:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2b08      	cmp	r3, #8
 800263e:	d006      	beq.n	800264e <I2C_MasterRequestWrite+0x2a>
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d003      	beq.n	800264e <I2C_MasterRequestWrite+0x2a>
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800264c:	d108      	bne.n	8002660 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	e00b      	b.n	8002678 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	2b12      	cmp	r3, #18
 8002666:	d107      	bne.n	8002678 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002676:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f000 f84f 	bl	8002728 <I2C_WaitOnFlagUntilTimeout>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00d      	beq.n	80026ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800269e:	d103      	bne.n	80026a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e035      	b.n	8002718 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026b4:	d108      	bne.n	80026c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026b6:	897b      	ldrh	r3, [r7, #10]
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	461a      	mov	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026c4:	611a      	str	r2, [r3, #16]
 80026c6:	e01b      	b.n	8002700 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026c8:	897b      	ldrh	r3, [r7, #10]
 80026ca:	11db      	asrs	r3, r3, #7
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	f003 0306 	and.w	r3, r3, #6
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	f063 030f 	orn	r3, r3, #15
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	490e      	ldr	r1, [pc, #56]	; (8002720 <I2C_MasterRequestWrite+0xfc>)
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f875 	bl	80027d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e010      	b.n	8002718 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026f6:	897b      	ldrh	r3, [r7, #10]
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	4907      	ldr	r1, [pc, #28]	; (8002724 <I2C_MasterRequestWrite+0x100>)
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f865 	bl	80027d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	00010008 	.word	0x00010008
 8002724:	00010002 	.word	0x00010002

08002728 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	4613      	mov	r3, r2
 8002736:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002738:	e025      	b.n	8002786 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002740:	d021      	beq.n	8002786 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002742:	f7ff f88f 	bl	8001864 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d302      	bcc.n	8002758 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d116      	bne.n	8002786 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2220      	movs	r2, #32
 8002762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f043 0220 	orr.w	r2, r3, #32
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e023      	b.n	80027ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	0c1b      	lsrs	r3, r3, #16
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b01      	cmp	r3, #1
 800278e:	d10d      	bne.n	80027ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	43da      	mvns	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	4013      	ands	r3, r2
 800279c:	b29b      	uxth	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	bf0c      	ite	eq
 80027a2:	2301      	moveq	r3, #1
 80027a4:	2300      	movne	r3, #0
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	461a      	mov	r2, r3
 80027aa:	e00c      	b.n	80027c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	43da      	mvns	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	4013      	ands	r3, r2
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	bf0c      	ite	eq
 80027be:	2301      	moveq	r3, #1
 80027c0:	2300      	movne	r3, #0
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d0b6      	beq.n	800273a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b084      	sub	sp, #16
 80027da:	af00      	add	r7, sp, #0
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	607a      	str	r2, [r7, #4]
 80027e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027e4:	e051      	b.n	800288a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f4:	d123      	bne.n	800283e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002804:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800280e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2220      	movs	r2, #32
 800281a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f043 0204 	orr.w	r2, r3, #4
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e046      	b.n	80028cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002844:	d021      	beq.n	800288a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002846:	f7ff f80d 	bl	8001864 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	429a      	cmp	r2, r3
 8002854:	d302      	bcc.n	800285c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d116      	bne.n	800288a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2220      	movs	r2, #32
 8002866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f043 0220 	orr.w	r2, r3, #32
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e020      	b.n	80028cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	0c1b      	lsrs	r3, r3, #16
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b01      	cmp	r3, #1
 8002892:	d10c      	bne.n	80028ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	43da      	mvns	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	4013      	ands	r3, r2
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	bf14      	ite	ne
 80028a6:	2301      	movne	r3, #1
 80028a8:	2300      	moveq	r3, #0
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	e00b      	b.n	80028c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	43da      	mvns	r2, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	4013      	ands	r3, r2
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf14      	ite	ne
 80028c0:	2301      	movne	r3, #1
 80028c2:	2300      	moveq	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d18d      	bne.n	80027e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028e0:	e02d      	b.n	800293e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f878 	bl	80029d8 <I2C_IsAcknowledgeFailed>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e02d      	b.n	800294e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f8:	d021      	beq.n	800293e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fa:	f7fe ffb3 	bl	8001864 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	429a      	cmp	r2, r3
 8002908:	d302      	bcc.n	8002910 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d116      	bne.n	800293e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2220      	movs	r2, #32
 800291a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	f043 0220 	orr.w	r2, r3, #32
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e007      	b.n	800294e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002948:	2b80      	cmp	r3, #128	; 0x80
 800294a:	d1ca      	bne.n	80028e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002962:	e02d      	b.n	80029c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 f837 	bl	80029d8 <I2C_IsAcknowledgeFailed>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e02d      	b.n	80029d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297a:	d021      	beq.n	80029c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800297c:	f7fe ff72 	bl	8001864 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	429a      	cmp	r2, r3
 800298a:	d302      	bcc.n	8002992 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d116      	bne.n	80029c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f043 0220 	orr.w	r2, r3, #32
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e007      	b.n	80029d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d1ca      	bne.n	8002964 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ee:	d11b      	bne.n	8002a28 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	f043 0204 	orr.w	r2, r3, #4
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e000      	b.n	8002a2a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
	...

08002a38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e264      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d075      	beq.n	8002b42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a56:	4ba3      	ldr	r3, [pc, #652]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d00c      	beq.n	8002a7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a62:	4ba0      	ldr	r3, [pc, #640]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d112      	bne.n	8002a94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a6e:	4b9d      	ldr	r3, [pc, #628]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a7a:	d10b      	bne.n	8002a94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7c:	4b99      	ldr	r3, [pc, #612]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d05b      	beq.n	8002b40 <HAL_RCC_OscConfig+0x108>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d157      	bne.n	8002b40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e23f      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9c:	d106      	bne.n	8002aac <HAL_RCC_OscConfig+0x74>
 8002a9e:	4b91      	ldr	r3, [pc, #580]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a90      	ldr	r2, [pc, #576]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	e01d      	b.n	8002ae8 <HAL_RCC_OscConfig+0xb0>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x98>
 8002ab6:	4b8b      	ldr	r3, [pc, #556]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a8a      	ldr	r2, [pc, #552]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	4b88      	ldr	r3, [pc, #544]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a87      	ldr	r2, [pc, #540]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e00b      	b.n	8002ae8 <HAL_RCC_OscConfig+0xb0>
 8002ad0:	4b84      	ldr	r3, [pc, #528]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a83      	ldr	r2, [pc, #524]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	4b81      	ldr	r3, [pc, #516]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a80      	ldr	r2, [pc, #512]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d013      	beq.n	8002b18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fe feb8 	bl	8001864 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af8:	f7fe feb4 	bl	8001864 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	; 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e204      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0a:	4b76      	ldr	r3, [pc, #472]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0xc0>
 8002b16:	e014      	b.n	8002b42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b18:	f7fe fea4 	bl	8001864 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b20:	f7fe fea0 	bl	8001864 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	; 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e1f0      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b32:	4b6c      	ldr	r3, [pc, #432]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0xe8>
 8002b3e:	e000      	b.n	8002b42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d063      	beq.n	8002c16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b4e:	4b65      	ldr	r3, [pc, #404]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00b      	beq.n	8002b72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b5a:	4b62      	ldr	r3, [pc, #392]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d11c      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b66:	4b5f      	ldr	r3, [pc, #380]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d116      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b72:	4b5c      	ldr	r3, [pc, #368]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <HAL_RCC_OscConfig+0x152>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d001      	beq.n	8002b8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e1c4      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8a:	4b56      	ldr	r3, [pc, #344]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4952      	ldr	r1, [pc, #328]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9e:	e03a      	b.n	8002c16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d020      	beq.n	8002bea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba8:	4b4f      	ldr	r3, [pc, #316]	; (8002ce8 <HAL_RCC_OscConfig+0x2b0>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bae:	f7fe fe59 	bl	8001864 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb6:	f7fe fe55 	bl	8001864 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e1a5      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc8:	4b46      	ldr	r3, [pc, #280]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd4:	4b43      	ldr	r3, [pc, #268]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4940      	ldr	r1, [pc, #256]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	600b      	str	r3, [r1, #0]
 8002be8:	e015      	b.n	8002c16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bea:	4b3f      	ldr	r3, [pc, #252]	; (8002ce8 <HAL_RCC_OscConfig+0x2b0>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fe38 	bl	8001864 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bf8:	f7fe fe34 	bl	8001864 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e184      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0a:	4b36      	ldr	r3, [pc, #216]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d030      	beq.n	8002c84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d016      	beq.n	8002c58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c2a:	4b30      	ldr	r3, [pc, #192]	; (8002cec <HAL_RCC_OscConfig+0x2b4>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c30:	f7fe fe18 	bl	8001864 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c38:	f7fe fe14 	bl	8001864 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e164      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4a:	4b26      	ldr	r3, [pc, #152]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x200>
 8002c56:	e015      	b.n	8002c84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c58:	4b24      	ldr	r3, [pc, #144]	; (8002cec <HAL_RCC_OscConfig+0x2b4>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5e:	f7fe fe01 	bl	8001864 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c66:	f7fe fdfd 	bl	8001864 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e14d      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c78:	4b1a      	ldr	r3, [pc, #104]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1f0      	bne.n	8002c66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 80a0 	beq.w	8002dd2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c92:	2300      	movs	r3, #0
 8002c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c96:	4b13      	ldr	r3, [pc, #76]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10f      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	4a0e      	ldr	r2, [pc, #56]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <HAL_RCC_OscConfig+0x2ac>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc2:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <HAL_RCC_OscConfig+0x2b8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d121      	bne.n	8002d12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cce:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <HAL_RCC_OscConfig+0x2b8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a07      	ldr	r2, [pc, #28]	; (8002cf0 <HAL_RCC_OscConfig+0x2b8>)
 8002cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cda:	f7fe fdc3 	bl	8001864 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce0:	e011      	b.n	8002d06 <HAL_RCC_OscConfig+0x2ce>
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	42470000 	.word	0x42470000
 8002cec:	42470e80 	.word	0x42470e80
 8002cf0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf4:	f7fe fdb6 	bl	8001864 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e106      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d06:	4b85      	ldr	r3, [pc, #532]	; (8002f1c <HAL_RCC_OscConfig+0x4e4>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d106      	bne.n	8002d28 <HAL_RCC_OscConfig+0x2f0>
 8002d1a:	4b81      	ldr	r3, [pc, #516]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1e:	4a80      	ldr	r2, [pc, #512]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	6713      	str	r3, [r2, #112]	; 0x70
 8002d26:	e01c      	b.n	8002d62 <HAL_RCC_OscConfig+0x32a>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b05      	cmp	r3, #5
 8002d2e:	d10c      	bne.n	8002d4a <HAL_RCC_OscConfig+0x312>
 8002d30:	4b7b      	ldr	r3, [pc, #492]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d34:	4a7a      	ldr	r2, [pc, #488]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d36:	f043 0304 	orr.w	r3, r3, #4
 8002d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3c:	4b78      	ldr	r3, [pc, #480]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d40:	4a77      	ldr	r2, [pc, #476]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	6713      	str	r3, [r2, #112]	; 0x70
 8002d48:	e00b      	b.n	8002d62 <HAL_RCC_OscConfig+0x32a>
 8002d4a:	4b75      	ldr	r3, [pc, #468]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4e:	4a74      	ldr	r2, [pc, #464]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d50:	f023 0301 	bic.w	r3, r3, #1
 8002d54:	6713      	str	r3, [r2, #112]	; 0x70
 8002d56:	4b72      	ldr	r3, [pc, #456]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5a:	4a71      	ldr	r2, [pc, #452]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d5c:	f023 0304 	bic.w	r3, r3, #4
 8002d60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d015      	beq.n	8002d96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6a:	f7fe fd7b 	bl	8001864 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d70:	e00a      	b.n	8002d88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d72:	f7fe fd77 	bl	8001864 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e0c5      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d88:	4b65      	ldr	r3, [pc, #404]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0ee      	beq.n	8002d72 <HAL_RCC_OscConfig+0x33a>
 8002d94:	e014      	b.n	8002dc0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d96:	f7fe fd65 	bl	8001864 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d9c:	e00a      	b.n	8002db4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d9e:	f7fe fd61 	bl	8001864 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e0af      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db4:	4b5a      	ldr	r3, [pc, #360]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1ee      	bne.n	8002d9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dc0:	7dfb      	ldrb	r3, [r7, #23]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d105      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc6:	4b56      	ldr	r3, [pc, #344]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	4a55      	ldr	r2, [pc, #340]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 809b 	beq.w	8002f12 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ddc:	4b50      	ldr	r3, [pc, #320]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 030c 	and.w	r3, r3, #12
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d05c      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d141      	bne.n	8002e74 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df0:	4b4c      	ldr	r3, [pc, #304]	; (8002f24 <HAL_RCC_OscConfig+0x4ec>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df6:	f7fe fd35 	bl	8001864 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dfe:	f7fe fd31 	bl	8001864 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e081      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e10:	4b43      	ldr	r3, [pc, #268]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1f0      	bne.n	8002dfe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69da      	ldr	r2, [r3, #28]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	431a      	orrs	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	019b      	lsls	r3, r3, #6
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e32:	085b      	lsrs	r3, r3, #1
 8002e34:	3b01      	subs	r3, #1
 8002e36:	041b      	lsls	r3, r3, #16
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3e:	061b      	lsls	r3, r3, #24
 8002e40:	4937      	ldr	r1, [pc, #220]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e46:	4b37      	ldr	r3, [pc, #220]	; (8002f24 <HAL_RCC_OscConfig+0x4ec>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4c:	f7fe fd0a 	bl	8001864 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e54:	f7fe fd06 	bl	8001864 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e056      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e66:	4b2e      	ldr	r3, [pc, #184]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0x41c>
 8002e72:	e04e      	b.n	8002f12 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e74:	4b2b      	ldr	r3, [pc, #172]	; (8002f24 <HAL_RCC_OscConfig+0x4ec>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7a:	f7fe fcf3 	bl	8001864 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e82:	f7fe fcef 	bl	8001864 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e03f      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e94:	4b22      	ldr	r3, [pc, #136]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1f0      	bne.n	8002e82 <HAL_RCC_OscConfig+0x44a>
 8002ea0:	e037      	b.n	8002f12 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e032      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002eae:	4b1c      	ldr	r3, [pc, #112]	; (8002f20 <HAL_RCC_OscConfig+0x4e8>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d028      	beq.n	8002f0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d121      	bne.n	8002f0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d11a      	bne.n	8002f0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ede:	4013      	ands	r3, r2
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ee4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d111      	bne.n	8002f0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef4:	085b      	lsrs	r3, r3, #1
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d107      	bne.n	8002f0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d001      	beq.n	8002f12 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40007000 	.word	0x40007000
 8002f20:	40023800 	.word	0x40023800
 8002f24:	42470060 	.word	0x42470060

08002f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0cc      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f3c:	4b68      	ldr	r3, [pc, #416]	; (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d90c      	bls.n	8002f64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4a:	4b65      	ldr	r3, [pc, #404]	; (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f52:	4b63      	ldr	r3, [pc, #396]	; (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d001      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0b8      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d020      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f7c:	4b59      	ldr	r3, [pc, #356]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	4a58      	ldr	r2, [pc, #352]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f94:	4b53      	ldr	r3, [pc, #332]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	4a52      	ldr	r2, [pc, #328]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa0:	4b50      	ldr	r3, [pc, #320]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	494d      	ldr	r1, [pc, #308]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d044      	beq.n	8003048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d107      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc6:	4b47      	ldr	r3, [pc, #284]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d119      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e07f      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d003      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe6:	4b3f      	ldr	r3, [pc, #252]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d109      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e06f      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff6:	4b3b      	ldr	r3, [pc, #236]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e067      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003006:	4b37      	ldr	r3, [pc, #220]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f023 0203 	bic.w	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4934      	ldr	r1, [pc, #208]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003014:	4313      	orrs	r3, r2
 8003016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003018:	f7fe fc24 	bl	8001864 <HAL_GetTick>
 800301c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301e:	e00a      	b.n	8003036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003020:	f7fe fc20 	bl	8001864 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	; 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e04f      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	4b2b      	ldr	r3, [pc, #172]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 020c 	and.w	r2, r3, #12
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	429a      	cmp	r2, r3
 8003046:	d1eb      	bne.n	8003020 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003048:	4b25      	ldr	r3, [pc, #148]	; (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d20c      	bcs.n	8003070 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003056:	4b22      	ldr	r3, [pc, #136]	; (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800305e:	4b20      	ldr	r3, [pc, #128]	; (80030e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d001      	beq.n	8003070 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e032      	b.n	80030d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800307c:	4b19      	ldr	r3, [pc, #100]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	4916      	ldr	r1, [pc, #88]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	4313      	orrs	r3, r2
 800308c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d009      	beq.n	80030ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800309a:	4b12      	ldr	r3, [pc, #72]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	490e      	ldr	r1, [pc, #56]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030ae:	f000 f821 	bl	80030f4 <HAL_RCC_GetSysClockFreq>
 80030b2:	4602      	mov	r2, r0
 80030b4:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	091b      	lsrs	r3, r3, #4
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	490a      	ldr	r1, [pc, #40]	; (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 80030c0:	5ccb      	ldrb	r3, [r1, r3]
 80030c2:	fa22 f303 	lsr.w	r3, r2, r3
 80030c6:	4a09      	ldr	r2, [pc, #36]	; (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 80030c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030ca:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <HAL_RCC_ClockConfig+0x1c8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fe fb84 	bl	80017dc <HAL_InitTick>

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40023c00 	.word	0x40023c00
 80030e4:	40023800 	.word	0x40023800
 80030e8:	08005834 	.word	0x08005834
 80030ec:	20000008 	.word	0x20000008
 80030f0:	2000000c 	.word	0x2000000c

080030f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030f8:	b084      	sub	sp, #16
 80030fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	607b      	str	r3, [r7, #4]
 8003100:	2300      	movs	r3, #0
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	2300      	movs	r3, #0
 8003106:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800310c:	4b67      	ldr	r3, [pc, #412]	; (80032ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 030c 	and.w	r3, r3, #12
 8003114:	2b08      	cmp	r3, #8
 8003116:	d00d      	beq.n	8003134 <HAL_RCC_GetSysClockFreq+0x40>
 8003118:	2b08      	cmp	r3, #8
 800311a:	f200 80bd 	bhi.w	8003298 <HAL_RCC_GetSysClockFreq+0x1a4>
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <HAL_RCC_GetSysClockFreq+0x34>
 8003122:	2b04      	cmp	r3, #4
 8003124:	d003      	beq.n	800312e <HAL_RCC_GetSysClockFreq+0x3a>
 8003126:	e0b7      	b.n	8003298 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003128:	4b61      	ldr	r3, [pc, #388]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800312a:	60bb      	str	r3, [r7, #8]
       break;
 800312c:	e0b7      	b.n	800329e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800312e:	4b61      	ldr	r3, [pc, #388]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003130:	60bb      	str	r3, [r7, #8]
      break;
 8003132:	e0b4      	b.n	800329e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003134:	4b5d      	ldr	r3, [pc, #372]	; (80032ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800313c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800313e:	4b5b      	ldr	r3, [pc, #364]	; (80032ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d04d      	beq.n	80031e6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800314a:	4b58      	ldr	r3, [pc, #352]	; (80032ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	099b      	lsrs	r3, r3, #6
 8003150:	461a      	mov	r2, r3
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	f240 10ff 	movw	r0, #511	; 0x1ff
 800315a:	f04f 0100 	mov.w	r1, #0
 800315e:	ea02 0800 	and.w	r8, r2, r0
 8003162:	ea03 0901 	and.w	r9, r3, r1
 8003166:	4640      	mov	r0, r8
 8003168:	4649      	mov	r1, r9
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	014b      	lsls	r3, r1, #5
 8003174:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003178:	0142      	lsls	r2, r0, #5
 800317a:	4610      	mov	r0, r2
 800317c:	4619      	mov	r1, r3
 800317e:	ebb0 0008 	subs.w	r0, r0, r8
 8003182:	eb61 0109 	sbc.w	r1, r1, r9
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	018b      	lsls	r3, r1, #6
 8003190:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003194:	0182      	lsls	r2, r0, #6
 8003196:	1a12      	subs	r2, r2, r0
 8003198:	eb63 0301 	sbc.w	r3, r3, r1
 800319c:	f04f 0000 	mov.w	r0, #0
 80031a0:	f04f 0100 	mov.w	r1, #0
 80031a4:	00d9      	lsls	r1, r3, #3
 80031a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031aa:	00d0      	lsls	r0, r2, #3
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	eb12 0208 	adds.w	r2, r2, r8
 80031b4:	eb43 0309 	adc.w	r3, r3, r9
 80031b8:	f04f 0000 	mov.w	r0, #0
 80031bc:	f04f 0100 	mov.w	r1, #0
 80031c0:	0259      	lsls	r1, r3, #9
 80031c2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80031c6:	0250      	lsls	r0, r2, #9
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4610      	mov	r0, r2
 80031ce:	4619      	mov	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	461a      	mov	r2, r3
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	f7fd f852 	bl	8000280 <__aeabi_uldivmod>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4613      	mov	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	e04a      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e6:	4b31      	ldr	r3, [pc, #196]	; (80032ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	099b      	lsrs	r3, r3, #6
 80031ec:	461a      	mov	r2, r3
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031f6:	f04f 0100 	mov.w	r1, #0
 80031fa:	ea02 0400 	and.w	r4, r2, r0
 80031fe:	ea03 0501 	and.w	r5, r3, r1
 8003202:	4620      	mov	r0, r4
 8003204:	4629      	mov	r1, r5
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	014b      	lsls	r3, r1, #5
 8003210:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003214:	0142      	lsls	r2, r0, #5
 8003216:	4610      	mov	r0, r2
 8003218:	4619      	mov	r1, r3
 800321a:	1b00      	subs	r0, r0, r4
 800321c:	eb61 0105 	sbc.w	r1, r1, r5
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	018b      	lsls	r3, r1, #6
 800322a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800322e:	0182      	lsls	r2, r0, #6
 8003230:	1a12      	subs	r2, r2, r0
 8003232:	eb63 0301 	sbc.w	r3, r3, r1
 8003236:	f04f 0000 	mov.w	r0, #0
 800323a:	f04f 0100 	mov.w	r1, #0
 800323e:	00d9      	lsls	r1, r3, #3
 8003240:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003244:	00d0      	lsls	r0, r2, #3
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	1912      	adds	r2, r2, r4
 800324c:	eb45 0303 	adc.w	r3, r5, r3
 8003250:	f04f 0000 	mov.w	r0, #0
 8003254:	f04f 0100 	mov.w	r1, #0
 8003258:	0299      	lsls	r1, r3, #10
 800325a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800325e:	0290      	lsls	r0, r2, #10
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	4610      	mov	r0, r2
 8003266:	4619      	mov	r1, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	461a      	mov	r2, r3
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	f7fd f806 	bl	8000280 <__aeabi_uldivmod>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4613      	mov	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	0c1b      	lsrs	r3, r3, #16
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	3301      	adds	r3, #1
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	fbb2 f3f3 	udiv	r3, r2, r3
 8003294:	60bb      	str	r3, [r7, #8]
      break;
 8003296:	e002      	b.n	800329e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003298:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800329a:	60bb      	str	r3, [r7, #8]
      break;
 800329c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800329e:	68bb      	ldr	r3, [r7, #8]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800
 80032b0:	00f42400 	.word	0x00f42400
 80032b4:	007a1200 	.word	0x007a1200

080032b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032bc:	4b03      	ldr	r3, [pc, #12]	; (80032cc <HAL_RCC_GetHCLKFreq+0x14>)
 80032be:	681b      	ldr	r3, [r3, #0]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	20000008 	.word	0x20000008

080032d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032d4:	f7ff fff0 	bl	80032b8 <HAL_RCC_GetHCLKFreq>
 80032d8:	4602      	mov	r2, r0
 80032da:	4b05      	ldr	r3, [pc, #20]	; (80032f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	0a9b      	lsrs	r3, r3, #10
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	4903      	ldr	r1, [pc, #12]	; (80032f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032e6:	5ccb      	ldrb	r3, [r1, r3]
 80032e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40023800 	.word	0x40023800
 80032f4:	08005844 	.word	0x08005844

080032f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032fc:	f7ff ffdc 	bl	80032b8 <HAL_RCC_GetHCLKFreq>
 8003300:	4602      	mov	r2, r0
 8003302:	4b05      	ldr	r3, [pc, #20]	; (8003318 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	0b5b      	lsrs	r3, r3, #13
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	4903      	ldr	r1, [pc, #12]	; (800331c <HAL_RCC_GetPCLK2Freq+0x24>)
 800330e:	5ccb      	ldrb	r3, [r1, r3]
 8003310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003314:	4618      	mov	r0, r3
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40023800 	.word	0x40023800
 800331c:	08005844 	.word	0x08005844

08003320 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e03f      	b.n	80033b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7fe f92e 	bl	80015a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2224      	movs	r2, #36	; 0x24
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003362:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 fc7b 	bl	8003c60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003378:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695a      	ldr	r2, [r3, #20]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003388:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003398:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b0ba      	sub	sp, #232	; 0xe8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80033fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10f      	bne.n	8003422 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003406:	f003 0320 	and.w	r3, r3, #32
 800340a:	2b00      	cmp	r3, #0
 800340c:	d009      	beq.n	8003422 <HAL_UART_IRQHandler+0x66>
 800340e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003412:	f003 0320 	and.w	r3, r3, #32
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 fb65 	bl	8003aea <UART_Receive_IT>
      return;
 8003420:	e256      	b.n	80038d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003422:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 80de 	beq.w	80035e8 <HAL_UART_IRQHandler+0x22c>
 800342c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d106      	bne.n	8003446 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800343c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 80d1 	beq.w	80035e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00b      	beq.n	800346a <HAL_UART_IRQHandler+0xae>
 8003452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f043 0201 	orr.w	r2, r3, #1
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800346a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00b      	beq.n	800348e <HAL_UART_IRQHandler+0xd2>
 8003476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d005      	beq.n	800348e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f043 0202 	orr.w	r2, r3, #2
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800348e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00b      	beq.n	80034b2 <HAL_UART_IRQHandler+0xf6>
 800349a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d005      	beq.n	80034b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	f043 0204 	orr.w	r2, r3, #4
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80034b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d011      	beq.n	80034e2 <HAL_UART_IRQHandler+0x126>
 80034be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034c2:	f003 0320 	and.w	r3, r3, #32
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d105      	bne.n	80034d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80034ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d005      	beq.n	80034e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	f043 0208 	orr.w	r2, r3, #8
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 81ed 	beq.w	80038c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034f0:	f003 0320 	and.w	r3, r3, #32
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <HAL_UART_IRQHandler+0x14e>
 80034f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034fc:	f003 0320 	and.w	r3, r3, #32
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 faf0 	bl	8003aea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003514:	2b40      	cmp	r3, #64	; 0x40
 8003516:	bf0c      	ite	eq
 8003518:	2301      	moveq	r3, #1
 800351a:	2300      	movne	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d103      	bne.n	8003536 <HAL_UART_IRQHandler+0x17a>
 800352e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003532:	2b00      	cmp	r3, #0
 8003534:	d04f      	beq.n	80035d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f9f8 	bl	800392c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003546:	2b40      	cmp	r3, #64	; 0x40
 8003548:	d141      	bne.n	80035ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	3314      	adds	r3, #20
 8003550:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003554:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003558:	e853 3f00 	ldrex	r3, [r3]
 800355c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003560:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003568:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	3314      	adds	r3, #20
 8003572:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003576:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800357a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003582:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003586:	e841 2300 	strex	r3, r2, [r1]
 800358a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800358e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1d9      	bne.n	800354a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359a:	2b00      	cmp	r3, #0
 800359c:	d013      	beq.n	80035c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a2:	4a7d      	ldr	r2, [pc, #500]	; (8003798 <HAL_UART_IRQHandler+0x3dc>)
 80035a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fe fb0b 	bl	8001bc6 <HAL_DMA_Abort_IT>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d016      	beq.n	80035e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035c0:	4610      	mov	r0, r2
 80035c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c4:	e00e      	b.n	80035e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f99a 	bl	8003900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035cc:	e00a      	b.n	80035e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f996 	bl	8003900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d4:	e006      	b.n	80035e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f992 	bl	8003900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80035e2:	e170      	b.n	80038c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e4:	bf00      	nop
    return;
 80035e6:	e16e      	b.n	80038c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	f040 814a 	bne.w	8003886 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80035f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 8143 	beq.w	8003886 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003604:	f003 0310 	and.w	r3, r3, #16
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 813c 	beq.w	8003886 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800360e:	2300      	movs	r3, #0
 8003610:	60bb      	str	r3, [r7, #8]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362e:	2b40      	cmp	r3, #64	; 0x40
 8003630:	f040 80b4 	bne.w	800379c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003640:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 8140 	beq.w	80038ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800364e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003652:	429a      	cmp	r2, r3
 8003654:	f080 8139 	bcs.w	80038ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800365e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800366a:	f000 8088 	beq.w	800377e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	330c      	adds	r3, #12
 8003674:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003678:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800367c:	e853 3f00 	ldrex	r3, [r3]
 8003680:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003684:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800368c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	330c      	adds	r3, #12
 8003696:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800369a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800369e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80036a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80036aa:	e841 2300 	strex	r3, r2, [r1]
 80036ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80036b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1d9      	bne.n	800366e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	3314      	adds	r3, #20
 80036c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036c4:	e853 3f00 	ldrex	r3, [r3]
 80036c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80036ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036cc:	f023 0301 	bic.w	r3, r3, #1
 80036d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	3314      	adds	r3, #20
 80036da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80036e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80036e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036ea:	e841 2300 	strex	r3, r2, [r1]
 80036ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80036f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1e1      	bne.n	80036ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	3314      	adds	r3, #20
 80036fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003700:	e853 3f00 	ldrex	r3, [r3]
 8003704:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800370c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3314      	adds	r3, #20
 8003716:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800371a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800371c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003720:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003722:	e841 2300 	strex	r3, r2, [r1]
 8003726:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003728:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1e3      	bne.n	80036f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2220      	movs	r2, #32
 8003732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	330c      	adds	r3, #12
 8003742:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003746:	e853 3f00 	ldrex	r3, [r3]
 800374a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800374c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800374e:	f023 0310 	bic.w	r3, r3, #16
 8003752:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	330c      	adds	r3, #12
 800375c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003760:	65ba      	str	r2, [r7, #88]	; 0x58
 8003762:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003764:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003766:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003768:	e841 2300 	strex	r3, r2, [r1]
 800376c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800376e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e3      	bne.n	800373c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003778:	4618      	mov	r0, r3
 800377a:	f7fe f9b4 	bl	8001ae6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003786:	b29b      	uxth	r3, r3
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	b29b      	uxth	r3, r3
 800378c:	4619      	mov	r1, r3
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f8c0 	bl	8003914 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003794:	e099      	b.n	80038ca <HAL_UART_IRQHandler+0x50e>
 8003796:	bf00      	nop
 8003798:	080039f3 	.word	0x080039f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 808b 	beq.w	80038ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80037b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 8086 	beq.w	80038ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	330c      	adds	r3, #12
 80037c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037cc:	e853 3f00 	ldrex	r3, [r3]
 80037d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	330c      	adds	r3, #12
 80037e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80037e6:	647a      	str	r2, [r7, #68]	; 0x44
 80037e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037ee:	e841 2300 	strex	r3, r2, [r1]
 80037f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1e3      	bne.n	80037c2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	3314      	adds	r3, #20
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	e853 3f00 	ldrex	r3, [r3]
 8003808:	623b      	str	r3, [r7, #32]
   return(result);
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	f023 0301 	bic.w	r3, r3, #1
 8003810:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	3314      	adds	r3, #20
 800381a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800381e:	633a      	str	r2, [r7, #48]	; 0x30
 8003820:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003822:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003826:	e841 2300 	strex	r3, r2, [r1]
 800382a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800382c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1e3      	bne.n	80037fa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	330c      	adds	r3, #12
 8003846:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	e853 3f00 	ldrex	r3, [r3]
 800384e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f023 0310 	bic.w	r3, r3, #16
 8003856:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	330c      	adds	r3, #12
 8003860:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003864:	61fa      	str	r2, [r7, #28]
 8003866:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003868:	69b9      	ldr	r1, [r7, #24]
 800386a:	69fa      	ldr	r2, [r7, #28]
 800386c:	e841 2300 	strex	r3, r2, [r1]
 8003870:	617b      	str	r3, [r7, #20]
   return(result);
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1e3      	bne.n	8003840 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003878:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800387c:	4619      	mov	r1, r3
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f848 	bl	8003914 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003884:	e023      	b.n	80038ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800388a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388e:	2b00      	cmp	r3, #0
 8003890:	d009      	beq.n	80038a6 <HAL_UART_IRQHandler+0x4ea>
 8003892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f8bb 	bl	8003a1a <UART_Transmit_IT>
    return;
 80038a4:	e014      	b.n	80038d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00e      	beq.n	80038d0 <HAL_UART_IRQHandler+0x514>
 80038b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d008      	beq.n	80038d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f8fb 	bl	8003aba <UART_EndTransmit_IT>
    return;
 80038c4:	e004      	b.n	80038d0 <HAL_UART_IRQHandler+0x514>
    return;
 80038c6:	bf00      	nop
 80038c8:	e002      	b.n	80038d0 <HAL_UART_IRQHandler+0x514>
      return;
 80038ca:	bf00      	nop
 80038cc:	e000      	b.n	80038d0 <HAL_UART_IRQHandler+0x514>
      return;
 80038ce:	bf00      	nop
  }
}
 80038d0:	37e8      	adds	r7, #232	; 0xe8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop

080038d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800392c:	b480      	push	{r7}
 800392e:	b095      	sub	sp, #84	; 0x54
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	330c      	adds	r3, #12
 800393a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800393e:	e853 3f00 	ldrex	r3, [r3]
 8003942:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003946:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800394a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	330c      	adds	r3, #12
 8003952:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003954:	643a      	str	r2, [r7, #64]	; 0x40
 8003956:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003958:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800395a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800395c:	e841 2300 	strex	r3, r2, [r1]
 8003960:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1e5      	bne.n	8003934 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	3314      	adds	r3, #20
 800396e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	e853 3f00 	ldrex	r3, [r3]
 8003976:	61fb      	str	r3, [r7, #28]
   return(result);
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f023 0301 	bic.w	r3, r3, #1
 800397e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3314      	adds	r3, #20
 8003986:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003988:	62fa      	str	r2, [r7, #44]	; 0x2c
 800398a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800398e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003990:	e841 2300 	strex	r3, r2, [r1]
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1e5      	bne.n	8003968 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d119      	bne.n	80039d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	330c      	adds	r3, #12
 80039aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	e853 3f00 	ldrex	r3, [r3]
 80039b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	f023 0310 	bic.w	r3, r3, #16
 80039ba:	647b      	str	r3, [r7, #68]	; 0x44
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	330c      	adds	r3, #12
 80039c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039c4:	61ba      	str	r2, [r7, #24]
 80039c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c8:	6979      	ldr	r1, [r7, #20]
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	e841 2300 	strex	r3, r2, [r1]
 80039d0:	613b      	str	r3, [r7, #16]
   return(result);
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1e5      	bne.n	80039a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80039e6:	bf00      	nop
 80039e8:	3754      	adds	r7, #84	; 0x54
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b084      	sub	sp, #16
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f7ff ff77 	bl	8003900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a12:	bf00      	nop
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b085      	sub	sp, #20
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b21      	cmp	r3, #33	; 0x21
 8003a2c:	d13e      	bne.n	8003aac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a36:	d114      	bne.n	8003a62 <UART_Transmit_IT+0x48>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d110      	bne.n	8003a62 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a54:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	1c9a      	adds	r2, r3, #2
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	621a      	str	r2, [r3, #32]
 8003a60:	e008      	b.n	8003a74 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	1c59      	adds	r1, r3, #1
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6211      	str	r1, [r2, #32]
 8003a6c:	781a      	ldrb	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	4619      	mov	r1, r3
 8003a82:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10f      	bne.n	8003aa8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a96:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003aa6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	e000      	b.n	8003aae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003aac:	2302      	movs	r3, #2
  }
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ad0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7ff fefc 	bl	80038d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b08c      	sub	sp, #48	; 0x30
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b22      	cmp	r3, #34	; 0x22
 8003afc:	f040 80ab 	bne.w	8003c56 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b08:	d117      	bne.n	8003b3a <UART_Receive_IT+0x50>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d113      	bne.n	8003b3a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b32:	1c9a      	adds	r2, r3, #2
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	629a      	str	r2, [r3, #40]	; 0x28
 8003b38:	e026      	b.n	8003b88 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003b40:	2300      	movs	r3, #0
 8003b42:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b4c:	d007      	beq.n	8003b5e <UART_Receive_IT+0x74>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10a      	bne.n	8003b6c <UART_Receive_IT+0x82>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b68:	701a      	strb	r2, [r3, #0]
 8003b6a:	e008      	b.n	8003b7e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b82:	1c5a      	adds	r2, r3, #1
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	4619      	mov	r1, r3
 8003b96:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d15a      	bne.n	8003c52 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0220 	bic.w	r2, r2, #32
 8003baa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695a      	ldr	r2, [r3, #20]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0201 	bic.w	r2, r2, #1
 8003bca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d135      	bne.n	8003c48 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	330c      	adds	r3, #12
 8003be8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	e853 3f00 	ldrex	r3, [r3]
 8003bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f023 0310 	bic.w	r3, r3, #16
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	330c      	adds	r3, #12
 8003c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c02:	623a      	str	r2, [r7, #32]
 8003c04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c06:	69f9      	ldr	r1, [r7, #28]
 8003c08:	6a3a      	ldr	r2, [r7, #32]
 8003c0a:	e841 2300 	strex	r3, r2, [r1]
 8003c0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1e5      	bne.n	8003be2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0310 	and.w	r3, r3, #16
 8003c20:	2b10      	cmp	r3, #16
 8003c22:	d10a      	bne.n	8003c3a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c3e:	4619      	mov	r1, r3
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff fe67 	bl	8003914 <HAL_UARTEx_RxEventCallback>
 8003c46:	e002      	b.n	8003c4e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7ff fe4f 	bl	80038ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	e002      	b.n	8003c58 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003c52:	2300      	movs	r3, #0
 8003c54:	e000      	b.n	8003c58 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003c56:	2302      	movs	r3, #2
  }
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3730      	adds	r7, #48	; 0x30
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c64:	b09f      	sub	sp, #124	; 0x7c
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c76:	68d9      	ldr	r1, [r3, #12]
 8003c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	ea40 0301 	orr.w	r3, r0, r1
 8003c80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	431a      	orrs	r2, r3
 8003c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ca4:	f021 010c 	bic.w	r1, r1, #12
 8003ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cae:	430b      	orrs	r3, r1
 8003cb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cbe:	6999      	ldr	r1, [r3, #24]
 8003cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	ea40 0301 	orr.w	r3, r0, r1
 8003cc8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	4bc5      	ldr	r3, [pc, #788]	; (8003fe4 <UART_SetConfig+0x384>)
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d004      	beq.n	8003cde <UART_SetConfig+0x7e>
 8003cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	4bc3      	ldr	r3, [pc, #780]	; (8003fe8 <UART_SetConfig+0x388>)
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d103      	bne.n	8003ce6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cde:	f7ff fb0b 	bl	80032f8 <HAL_RCC_GetPCLK2Freq>
 8003ce2:	6778      	str	r0, [r7, #116]	; 0x74
 8003ce4:	e002      	b.n	8003cec <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ce6:	f7ff faf3 	bl	80032d0 <HAL_RCC_GetPCLK1Freq>
 8003cea:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cf4:	f040 80b6 	bne.w	8003e64 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cfa:	461c      	mov	r4, r3
 8003cfc:	f04f 0500 	mov.w	r5, #0
 8003d00:	4622      	mov	r2, r4
 8003d02:	462b      	mov	r3, r5
 8003d04:	1891      	adds	r1, r2, r2
 8003d06:	6439      	str	r1, [r7, #64]	; 0x40
 8003d08:	415b      	adcs	r3, r3
 8003d0a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d0c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d10:	1912      	adds	r2, r2, r4
 8003d12:	eb45 0303 	adc.w	r3, r5, r3
 8003d16:	f04f 0000 	mov.w	r0, #0
 8003d1a:	f04f 0100 	mov.w	r1, #0
 8003d1e:	00d9      	lsls	r1, r3, #3
 8003d20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d24:	00d0      	lsls	r0, r2, #3
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	1911      	adds	r1, r2, r4
 8003d2c:	6639      	str	r1, [r7, #96]	; 0x60
 8003d2e:	416b      	adcs	r3, r5
 8003d30:	667b      	str	r3, [r7, #100]	; 0x64
 8003d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	461a      	mov	r2, r3
 8003d38:	f04f 0300 	mov.w	r3, #0
 8003d3c:	1891      	adds	r1, r2, r2
 8003d3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d40:	415b      	adcs	r3, r3
 8003d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d48:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003d4c:	f7fc fa98 	bl	8000280 <__aeabi_uldivmod>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4ba5      	ldr	r3, [pc, #660]	; (8003fec <UART_SetConfig+0x38c>)
 8003d56:	fba3 2302 	umull	r2, r3, r3, r2
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	011e      	lsls	r6, r3, #4
 8003d5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d60:	461c      	mov	r4, r3
 8003d62:	f04f 0500 	mov.w	r5, #0
 8003d66:	4622      	mov	r2, r4
 8003d68:	462b      	mov	r3, r5
 8003d6a:	1891      	adds	r1, r2, r2
 8003d6c:	6339      	str	r1, [r7, #48]	; 0x30
 8003d6e:	415b      	adcs	r3, r3
 8003d70:	637b      	str	r3, [r7, #52]	; 0x34
 8003d72:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d76:	1912      	adds	r2, r2, r4
 8003d78:	eb45 0303 	adc.w	r3, r5, r3
 8003d7c:	f04f 0000 	mov.w	r0, #0
 8003d80:	f04f 0100 	mov.w	r1, #0
 8003d84:	00d9      	lsls	r1, r3, #3
 8003d86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d8a:	00d0      	lsls	r0, r2, #3
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	1911      	adds	r1, r2, r4
 8003d92:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d94:	416b      	adcs	r3, r5
 8003d96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	1891      	adds	r1, r2, r2
 8003da4:	62b9      	str	r1, [r7, #40]	; 0x28
 8003da6:	415b      	adcs	r3, r3
 8003da8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003daa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003db2:	f7fc fa65 	bl	8000280 <__aeabi_uldivmod>
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
 8003dba:	4b8c      	ldr	r3, [pc, #560]	; (8003fec <UART_SetConfig+0x38c>)
 8003dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8003dc0:	095b      	lsrs	r3, r3, #5
 8003dc2:	2164      	movs	r1, #100	; 0x64
 8003dc4:	fb01 f303 	mul.w	r3, r1, r3
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	3332      	adds	r3, #50	; 0x32
 8003dce:	4a87      	ldr	r2, [pc, #540]	; (8003fec <UART_SetConfig+0x38c>)
 8003dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd4:	095b      	lsrs	r3, r3, #5
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ddc:	441e      	add	r6, r3
 8003dde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003de0:	4618      	mov	r0, r3
 8003de2:	f04f 0100 	mov.w	r1, #0
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	1894      	adds	r4, r2, r2
 8003dec:	623c      	str	r4, [r7, #32]
 8003dee:	415b      	adcs	r3, r3
 8003df0:	627b      	str	r3, [r7, #36]	; 0x24
 8003df2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003df6:	1812      	adds	r2, r2, r0
 8003df8:	eb41 0303 	adc.w	r3, r1, r3
 8003dfc:	f04f 0400 	mov.w	r4, #0
 8003e00:	f04f 0500 	mov.w	r5, #0
 8003e04:	00dd      	lsls	r5, r3, #3
 8003e06:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e0a:	00d4      	lsls	r4, r2, #3
 8003e0c:	4622      	mov	r2, r4
 8003e0e:	462b      	mov	r3, r5
 8003e10:	1814      	adds	r4, r2, r0
 8003e12:	653c      	str	r4, [r7, #80]	; 0x50
 8003e14:	414b      	adcs	r3, r1
 8003e16:	657b      	str	r3, [r7, #84]	; 0x54
 8003e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	f04f 0300 	mov.w	r3, #0
 8003e22:	1891      	adds	r1, r2, r2
 8003e24:	61b9      	str	r1, [r7, #24]
 8003e26:	415b      	adcs	r3, r3
 8003e28:	61fb      	str	r3, [r7, #28]
 8003e2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e2e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003e32:	f7fc fa25 	bl	8000280 <__aeabi_uldivmod>
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	4b6c      	ldr	r3, [pc, #432]	; (8003fec <UART_SetConfig+0x38c>)
 8003e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e40:	095b      	lsrs	r3, r3, #5
 8003e42:	2164      	movs	r1, #100	; 0x64
 8003e44:	fb01 f303 	mul.w	r3, r1, r3
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	3332      	adds	r3, #50	; 0x32
 8003e4e:	4a67      	ldr	r2, [pc, #412]	; (8003fec <UART_SetConfig+0x38c>)
 8003e50:	fba2 2303 	umull	r2, r3, r2, r3
 8003e54:	095b      	lsrs	r3, r3, #5
 8003e56:	f003 0207 	and.w	r2, r3, #7
 8003e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4432      	add	r2, r6
 8003e60:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e62:	e0b9      	b.n	8003fd8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e66:	461c      	mov	r4, r3
 8003e68:	f04f 0500 	mov.w	r5, #0
 8003e6c:	4622      	mov	r2, r4
 8003e6e:	462b      	mov	r3, r5
 8003e70:	1891      	adds	r1, r2, r2
 8003e72:	6139      	str	r1, [r7, #16]
 8003e74:	415b      	adcs	r3, r3
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e7c:	1912      	adds	r2, r2, r4
 8003e7e:	eb45 0303 	adc.w	r3, r5, r3
 8003e82:	f04f 0000 	mov.w	r0, #0
 8003e86:	f04f 0100 	mov.w	r1, #0
 8003e8a:	00d9      	lsls	r1, r3, #3
 8003e8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e90:	00d0      	lsls	r0, r2, #3
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	eb12 0804 	adds.w	r8, r2, r4
 8003e9a:	eb43 0905 	adc.w	r9, r3, r5
 8003e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f04f 0100 	mov.w	r1, #0
 8003ea8:	f04f 0200 	mov.w	r2, #0
 8003eac:	f04f 0300 	mov.w	r3, #0
 8003eb0:	008b      	lsls	r3, r1, #2
 8003eb2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003eb6:	0082      	lsls	r2, r0, #2
 8003eb8:	4640      	mov	r0, r8
 8003eba:	4649      	mov	r1, r9
 8003ebc:	f7fc f9e0 	bl	8000280 <__aeabi_uldivmod>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	4b49      	ldr	r3, [pc, #292]	; (8003fec <UART_SetConfig+0x38c>)
 8003ec6:	fba3 2302 	umull	r2, r3, r3, r2
 8003eca:	095b      	lsrs	r3, r3, #5
 8003ecc:	011e      	lsls	r6, r3, #4
 8003ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f04f 0100 	mov.w	r1, #0
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	1894      	adds	r4, r2, r2
 8003edc:	60bc      	str	r4, [r7, #8]
 8003ede:	415b      	adcs	r3, r3
 8003ee0:	60fb      	str	r3, [r7, #12]
 8003ee2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ee6:	1812      	adds	r2, r2, r0
 8003ee8:	eb41 0303 	adc.w	r3, r1, r3
 8003eec:	f04f 0400 	mov.w	r4, #0
 8003ef0:	f04f 0500 	mov.w	r5, #0
 8003ef4:	00dd      	lsls	r5, r3, #3
 8003ef6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003efa:	00d4      	lsls	r4, r2, #3
 8003efc:	4622      	mov	r2, r4
 8003efe:	462b      	mov	r3, r5
 8003f00:	1814      	adds	r4, r2, r0
 8003f02:	64bc      	str	r4, [r7, #72]	; 0x48
 8003f04:	414b      	adcs	r3, r1
 8003f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f04f 0100 	mov.w	r1, #0
 8003f12:	f04f 0200 	mov.w	r2, #0
 8003f16:	f04f 0300 	mov.w	r3, #0
 8003f1a:	008b      	lsls	r3, r1, #2
 8003f1c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f20:	0082      	lsls	r2, r0, #2
 8003f22:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003f26:	f7fc f9ab 	bl	8000280 <__aeabi_uldivmod>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	4b2f      	ldr	r3, [pc, #188]	; (8003fec <UART_SetConfig+0x38c>)
 8003f30:	fba3 1302 	umull	r1, r3, r3, r2
 8003f34:	095b      	lsrs	r3, r3, #5
 8003f36:	2164      	movs	r1, #100	; 0x64
 8003f38:	fb01 f303 	mul.w	r3, r1, r3
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	3332      	adds	r3, #50	; 0x32
 8003f42:	4a2a      	ldr	r2, [pc, #168]	; (8003fec <UART_SetConfig+0x38c>)
 8003f44:	fba2 2303 	umull	r2, r3, r2, r3
 8003f48:	095b      	lsrs	r3, r3, #5
 8003f4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f4e:	441e      	add	r6, r3
 8003f50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f52:	4618      	mov	r0, r3
 8003f54:	f04f 0100 	mov.w	r1, #0
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	1894      	adds	r4, r2, r2
 8003f5e:	603c      	str	r4, [r7, #0]
 8003f60:	415b      	adcs	r3, r3
 8003f62:	607b      	str	r3, [r7, #4]
 8003f64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f68:	1812      	adds	r2, r2, r0
 8003f6a:	eb41 0303 	adc.w	r3, r1, r3
 8003f6e:	f04f 0400 	mov.w	r4, #0
 8003f72:	f04f 0500 	mov.w	r5, #0
 8003f76:	00dd      	lsls	r5, r3, #3
 8003f78:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f7c:	00d4      	lsls	r4, r2, #3
 8003f7e:	4622      	mov	r2, r4
 8003f80:	462b      	mov	r3, r5
 8003f82:	eb12 0a00 	adds.w	sl, r2, r0
 8003f86:	eb43 0b01 	adc.w	fp, r3, r1
 8003f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f04f 0100 	mov.w	r1, #0
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	008b      	lsls	r3, r1, #2
 8003f9e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fa2:	0082      	lsls	r2, r0, #2
 8003fa4:	4650      	mov	r0, sl
 8003fa6:	4659      	mov	r1, fp
 8003fa8:	f7fc f96a 	bl	8000280 <__aeabi_uldivmod>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4b0e      	ldr	r3, [pc, #56]	; (8003fec <UART_SetConfig+0x38c>)
 8003fb2:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	2164      	movs	r1, #100	; 0x64
 8003fba:	fb01 f303 	mul.w	r3, r1, r3
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	3332      	adds	r3, #50	; 0x32
 8003fc4:	4a09      	ldr	r2, [pc, #36]	; (8003fec <UART_SetConfig+0x38c>)
 8003fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fca:	095b      	lsrs	r3, r3, #5
 8003fcc:	f003 020f 	and.w	r2, r3, #15
 8003fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4432      	add	r2, r6
 8003fd6:	609a      	str	r2, [r3, #8]
}
 8003fd8:	bf00      	nop
 8003fda:	377c      	adds	r7, #124	; 0x7c
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40011000 	.word	0x40011000
 8003fe8:	40011400 	.word	0x40011400
 8003fec:	51eb851f 	.word	0x51eb851f

08003ff0 <__errno>:
 8003ff0:	4b01      	ldr	r3, [pc, #4]	; (8003ff8 <__errno+0x8>)
 8003ff2:	6818      	ldr	r0, [r3, #0]
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	20000014 	.word	0x20000014

08003ffc <__libc_init_array>:
 8003ffc:	b570      	push	{r4, r5, r6, lr}
 8003ffe:	4d0d      	ldr	r5, [pc, #52]	; (8004034 <__libc_init_array+0x38>)
 8004000:	4c0d      	ldr	r4, [pc, #52]	; (8004038 <__libc_init_array+0x3c>)
 8004002:	1b64      	subs	r4, r4, r5
 8004004:	10a4      	asrs	r4, r4, #2
 8004006:	2600      	movs	r6, #0
 8004008:	42a6      	cmp	r6, r4
 800400a:	d109      	bne.n	8004020 <__libc_init_array+0x24>
 800400c:	4d0b      	ldr	r5, [pc, #44]	; (800403c <__libc_init_array+0x40>)
 800400e:	4c0c      	ldr	r4, [pc, #48]	; (8004040 <__libc_init_array+0x44>)
 8004010:	f000 fc82 	bl	8004918 <_init>
 8004014:	1b64      	subs	r4, r4, r5
 8004016:	10a4      	asrs	r4, r4, #2
 8004018:	2600      	movs	r6, #0
 800401a:	42a6      	cmp	r6, r4
 800401c:	d105      	bne.n	800402a <__libc_init_array+0x2e>
 800401e:	bd70      	pop	{r4, r5, r6, pc}
 8004020:	f855 3b04 	ldr.w	r3, [r5], #4
 8004024:	4798      	blx	r3
 8004026:	3601      	adds	r6, #1
 8004028:	e7ee      	b.n	8004008 <__libc_init_array+0xc>
 800402a:	f855 3b04 	ldr.w	r3, [r5], #4
 800402e:	4798      	blx	r3
 8004030:	3601      	adds	r6, #1
 8004032:	e7f2      	b.n	800401a <__libc_init_array+0x1e>
 8004034:	08005888 	.word	0x08005888
 8004038:	08005888 	.word	0x08005888
 800403c:	08005888 	.word	0x08005888
 8004040:	0800588c 	.word	0x0800588c

08004044 <memset>:
 8004044:	4402      	add	r2, r0
 8004046:	4603      	mov	r3, r0
 8004048:	4293      	cmp	r3, r2
 800404a:	d100      	bne.n	800404e <memset+0xa>
 800404c:	4770      	bx	lr
 800404e:	f803 1b01 	strb.w	r1, [r3], #1
 8004052:	e7f9      	b.n	8004048 <memset+0x4>

08004054 <sniprintf>:
 8004054:	b40c      	push	{r2, r3}
 8004056:	b530      	push	{r4, r5, lr}
 8004058:	4b17      	ldr	r3, [pc, #92]	; (80040b8 <sniprintf+0x64>)
 800405a:	1e0c      	subs	r4, r1, #0
 800405c:	681d      	ldr	r5, [r3, #0]
 800405e:	b09d      	sub	sp, #116	; 0x74
 8004060:	da08      	bge.n	8004074 <sniprintf+0x20>
 8004062:	238b      	movs	r3, #139	; 0x8b
 8004064:	602b      	str	r3, [r5, #0]
 8004066:	f04f 30ff 	mov.w	r0, #4294967295
 800406a:	b01d      	add	sp, #116	; 0x74
 800406c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004070:	b002      	add	sp, #8
 8004072:	4770      	bx	lr
 8004074:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004078:	f8ad 3014 	strh.w	r3, [sp, #20]
 800407c:	bf14      	ite	ne
 800407e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004082:	4623      	moveq	r3, r4
 8004084:	9304      	str	r3, [sp, #16]
 8004086:	9307      	str	r3, [sp, #28]
 8004088:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800408c:	9002      	str	r0, [sp, #8]
 800408e:	9006      	str	r0, [sp, #24]
 8004090:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004094:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004096:	ab21      	add	r3, sp, #132	; 0x84
 8004098:	a902      	add	r1, sp, #8
 800409a:	4628      	mov	r0, r5
 800409c:	9301      	str	r3, [sp, #4]
 800409e:	f000 f889 	bl	80041b4 <_svfiprintf_r>
 80040a2:	1c43      	adds	r3, r0, #1
 80040a4:	bfbc      	itt	lt
 80040a6:	238b      	movlt	r3, #139	; 0x8b
 80040a8:	602b      	strlt	r3, [r5, #0]
 80040aa:	2c00      	cmp	r4, #0
 80040ac:	d0dd      	beq.n	800406a <sniprintf+0x16>
 80040ae:	9b02      	ldr	r3, [sp, #8]
 80040b0:	2200      	movs	r2, #0
 80040b2:	701a      	strb	r2, [r3, #0]
 80040b4:	e7d9      	b.n	800406a <sniprintf+0x16>
 80040b6:	bf00      	nop
 80040b8:	20000014 	.word	0x20000014

080040bc <siprintf>:
 80040bc:	b40e      	push	{r1, r2, r3}
 80040be:	b500      	push	{lr}
 80040c0:	b09c      	sub	sp, #112	; 0x70
 80040c2:	ab1d      	add	r3, sp, #116	; 0x74
 80040c4:	9002      	str	r0, [sp, #8]
 80040c6:	9006      	str	r0, [sp, #24]
 80040c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80040cc:	4809      	ldr	r0, [pc, #36]	; (80040f4 <siprintf+0x38>)
 80040ce:	9107      	str	r1, [sp, #28]
 80040d0:	9104      	str	r1, [sp, #16]
 80040d2:	4909      	ldr	r1, [pc, #36]	; (80040f8 <siprintf+0x3c>)
 80040d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80040d8:	9105      	str	r1, [sp, #20]
 80040da:	6800      	ldr	r0, [r0, #0]
 80040dc:	9301      	str	r3, [sp, #4]
 80040de:	a902      	add	r1, sp, #8
 80040e0:	f000 f868 	bl	80041b4 <_svfiprintf_r>
 80040e4:	9b02      	ldr	r3, [sp, #8]
 80040e6:	2200      	movs	r2, #0
 80040e8:	701a      	strb	r2, [r3, #0]
 80040ea:	b01c      	add	sp, #112	; 0x70
 80040ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80040f0:	b003      	add	sp, #12
 80040f2:	4770      	bx	lr
 80040f4:	20000014 	.word	0x20000014
 80040f8:	ffff0208 	.word	0xffff0208

080040fc <__ssputs_r>:
 80040fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004100:	688e      	ldr	r6, [r1, #8]
 8004102:	429e      	cmp	r6, r3
 8004104:	4682      	mov	sl, r0
 8004106:	460c      	mov	r4, r1
 8004108:	4690      	mov	r8, r2
 800410a:	461f      	mov	r7, r3
 800410c:	d838      	bhi.n	8004180 <__ssputs_r+0x84>
 800410e:	898a      	ldrh	r2, [r1, #12]
 8004110:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004114:	d032      	beq.n	800417c <__ssputs_r+0x80>
 8004116:	6825      	ldr	r5, [r4, #0]
 8004118:	6909      	ldr	r1, [r1, #16]
 800411a:	eba5 0901 	sub.w	r9, r5, r1
 800411e:	6965      	ldr	r5, [r4, #20]
 8004120:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004124:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004128:	3301      	adds	r3, #1
 800412a:	444b      	add	r3, r9
 800412c:	106d      	asrs	r5, r5, #1
 800412e:	429d      	cmp	r5, r3
 8004130:	bf38      	it	cc
 8004132:	461d      	movcc	r5, r3
 8004134:	0553      	lsls	r3, r2, #21
 8004136:	d531      	bpl.n	800419c <__ssputs_r+0xa0>
 8004138:	4629      	mov	r1, r5
 800413a:	f000 fb47 	bl	80047cc <_malloc_r>
 800413e:	4606      	mov	r6, r0
 8004140:	b950      	cbnz	r0, 8004158 <__ssputs_r+0x5c>
 8004142:	230c      	movs	r3, #12
 8004144:	f8ca 3000 	str.w	r3, [sl]
 8004148:	89a3      	ldrh	r3, [r4, #12]
 800414a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800414e:	81a3      	strh	r3, [r4, #12]
 8004150:	f04f 30ff 	mov.w	r0, #4294967295
 8004154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004158:	6921      	ldr	r1, [r4, #16]
 800415a:	464a      	mov	r2, r9
 800415c:	f000 fabe 	bl	80046dc <memcpy>
 8004160:	89a3      	ldrh	r3, [r4, #12]
 8004162:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800416a:	81a3      	strh	r3, [r4, #12]
 800416c:	6126      	str	r6, [r4, #16]
 800416e:	6165      	str	r5, [r4, #20]
 8004170:	444e      	add	r6, r9
 8004172:	eba5 0509 	sub.w	r5, r5, r9
 8004176:	6026      	str	r6, [r4, #0]
 8004178:	60a5      	str	r5, [r4, #8]
 800417a:	463e      	mov	r6, r7
 800417c:	42be      	cmp	r6, r7
 800417e:	d900      	bls.n	8004182 <__ssputs_r+0x86>
 8004180:	463e      	mov	r6, r7
 8004182:	4632      	mov	r2, r6
 8004184:	6820      	ldr	r0, [r4, #0]
 8004186:	4641      	mov	r1, r8
 8004188:	f000 fab6 	bl	80046f8 <memmove>
 800418c:	68a3      	ldr	r3, [r4, #8]
 800418e:	6822      	ldr	r2, [r4, #0]
 8004190:	1b9b      	subs	r3, r3, r6
 8004192:	4432      	add	r2, r6
 8004194:	60a3      	str	r3, [r4, #8]
 8004196:	6022      	str	r2, [r4, #0]
 8004198:	2000      	movs	r0, #0
 800419a:	e7db      	b.n	8004154 <__ssputs_r+0x58>
 800419c:	462a      	mov	r2, r5
 800419e:	f000 fb6f 	bl	8004880 <_realloc_r>
 80041a2:	4606      	mov	r6, r0
 80041a4:	2800      	cmp	r0, #0
 80041a6:	d1e1      	bne.n	800416c <__ssputs_r+0x70>
 80041a8:	6921      	ldr	r1, [r4, #16]
 80041aa:	4650      	mov	r0, sl
 80041ac:	f000 fabe 	bl	800472c <_free_r>
 80041b0:	e7c7      	b.n	8004142 <__ssputs_r+0x46>
	...

080041b4 <_svfiprintf_r>:
 80041b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b8:	4698      	mov	r8, r3
 80041ba:	898b      	ldrh	r3, [r1, #12]
 80041bc:	061b      	lsls	r3, r3, #24
 80041be:	b09d      	sub	sp, #116	; 0x74
 80041c0:	4607      	mov	r7, r0
 80041c2:	460d      	mov	r5, r1
 80041c4:	4614      	mov	r4, r2
 80041c6:	d50e      	bpl.n	80041e6 <_svfiprintf_r+0x32>
 80041c8:	690b      	ldr	r3, [r1, #16]
 80041ca:	b963      	cbnz	r3, 80041e6 <_svfiprintf_r+0x32>
 80041cc:	2140      	movs	r1, #64	; 0x40
 80041ce:	f000 fafd 	bl	80047cc <_malloc_r>
 80041d2:	6028      	str	r0, [r5, #0]
 80041d4:	6128      	str	r0, [r5, #16]
 80041d6:	b920      	cbnz	r0, 80041e2 <_svfiprintf_r+0x2e>
 80041d8:	230c      	movs	r3, #12
 80041da:	603b      	str	r3, [r7, #0]
 80041dc:	f04f 30ff 	mov.w	r0, #4294967295
 80041e0:	e0d1      	b.n	8004386 <_svfiprintf_r+0x1d2>
 80041e2:	2340      	movs	r3, #64	; 0x40
 80041e4:	616b      	str	r3, [r5, #20]
 80041e6:	2300      	movs	r3, #0
 80041e8:	9309      	str	r3, [sp, #36]	; 0x24
 80041ea:	2320      	movs	r3, #32
 80041ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80041f4:	2330      	movs	r3, #48	; 0x30
 80041f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80043a0 <_svfiprintf_r+0x1ec>
 80041fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041fe:	f04f 0901 	mov.w	r9, #1
 8004202:	4623      	mov	r3, r4
 8004204:	469a      	mov	sl, r3
 8004206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800420a:	b10a      	cbz	r2, 8004210 <_svfiprintf_r+0x5c>
 800420c:	2a25      	cmp	r2, #37	; 0x25
 800420e:	d1f9      	bne.n	8004204 <_svfiprintf_r+0x50>
 8004210:	ebba 0b04 	subs.w	fp, sl, r4
 8004214:	d00b      	beq.n	800422e <_svfiprintf_r+0x7a>
 8004216:	465b      	mov	r3, fp
 8004218:	4622      	mov	r2, r4
 800421a:	4629      	mov	r1, r5
 800421c:	4638      	mov	r0, r7
 800421e:	f7ff ff6d 	bl	80040fc <__ssputs_r>
 8004222:	3001      	adds	r0, #1
 8004224:	f000 80aa 	beq.w	800437c <_svfiprintf_r+0x1c8>
 8004228:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800422a:	445a      	add	r2, fp
 800422c:	9209      	str	r2, [sp, #36]	; 0x24
 800422e:	f89a 3000 	ldrb.w	r3, [sl]
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 80a2 	beq.w	800437c <_svfiprintf_r+0x1c8>
 8004238:	2300      	movs	r3, #0
 800423a:	f04f 32ff 	mov.w	r2, #4294967295
 800423e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004242:	f10a 0a01 	add.w	sl, sl, #1
 8004246:	9304      	str	r3, [sp, #16]
 8004248:	9307      	str	r3, [sp, #28]
 800424a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800424e:	931a      	str	r3, [sp, #104]	; 0x68
 8004250:	4654      	mov	r4, sl
 8004252:	2205      	movs	r2, #5
 8004254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004258:	4851      	ldr	r0, [pc, #324]	; (80043a0 <_svfiprintf_r+0x1ec>)
 800425a:	f7fb ffc1 	bl	80001e0 <memchr>
 800425e:	9a04      	ldr	r2, [sp, #16]
 8004260:	b9d8      	cbnz	r0, 800429a <_svfiprintf_r+0xe6>
 8004262:	06d0      	lsls	r0, r2, #27
 8004264:	bf44      	itt	mi
 8004266:	2320      	movmi	r3, #32
 8004268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800426c:	0711      	lsls	r1, r2, #28
 800426e:	bf44      	itt	mi
 8004270:	232b      	movmi	r3, #43	; 0x2b
 8004272:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004276:	f89a 3000 	ldrb.w	r3, [sl]
 800427a:	2b2a      	cmp	r3, #42	; 0x2a
 800427c:	d015      	beq.n	80042aa <_svfiprintf_r+0xf6>
 800427e:	9a07      	ldr	r2, [sp, #28]
 8004280:	4654      	mov	r4, sl
 8004282:	2000      	movs	r0, #0
 8004284:	f04f 0c0a 	mov.w	ip, #10
 8004288:	4621      	mov	r1, r4
 800428a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800428e:	3b30      	subs	r3, #48	; 0x30
 8004290:	2b09      	cmp	r3, #9
 8004292:	d94e      	bls.n	8004332 <_svfiprintf_r+0x17e>
 8004294:	b1b0      	cbz	r0, 80042c4 <_svfiprintf_r+0x110>
 8004296:	9207      	str	r2, [sp, #28]
 8004298:	e014      	b.n	80042c4 <_svfiprintf_r+0x110>
 800429a:	eba0 0308 	sub.w	r3, r0, r8
 800429e:	fa09 f303 	lsl.w	r3, r9, r3
 80042a2:	4313      	orrs	r3, r2
 80042a4:	9304      	str	r3, [sp, #16]
 80042a6:	46a2      	mov	sl, r4
 80042a8:	e7d2      	b.n	8004250 <_svfiprintf_r+0x9c>
 80042aa:	9b03      	ldr	r3, [sp, #12]
 80042ac:	1d19      	adds	r1, r3, #4
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	9103      	str	r1, [sp, #12]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	bfbb      	ittet	lt
 80042b6:	425b      	neglt	r3, r3
 80042b8:	f042 0202 	orrlt.w	r2, r2, #2
 80042bc:	9307      	strge	r3, [sp, #28]
 80042be:	9307      	strlt	r3, [sp, #28]
 80042c0:	bfb8      	it	lt
 80042c2:	9204      	strlt	r2, [sp, #16]
 80042c4:	7823      	ldrb	r3, [r4, #0]
 80042c6:	2b2e      	cmp	r3, #46	; 0x2e
 80042c8:	d10c      	bne.n	80042e4 <_svfiprintf_r+0x130>
 80042ca:	7863      	ldrb	r3, [r4, #1]
 80042cc:	2b2a      	cmp	r3, #42	; 0x2a
 80042ce:	d135      	bne.n	800433c <_svfiprintf_r+0x188>
 80042d0:	9b03      	ldr	r3, [sp, #12]
 80042d2:	1d1a      	adds	r2, r3, #4
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	9203      	str	r2, [sp, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	bfb8      	it	lt
 80042dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80042e0:	3402      	adds	r4, #2
 80042e2:	9305      	str	r3, [sp, #20]
 80042e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80043b0 <_svfiprintf_r+0x1fc>
 80042e8:	7821      	ldrb	r1, [r4, #0]
 80042ea:	2203      	movs	r2, #3
 80042ec:	4650      	mov	r0, sl
 80042ee:	f7fb ff77 	bl	80001e0 <memchr>
 80042f2:	b140      	cbz	r0, 8004306 <_svfiprintf_r+0x152>
 80042f4:	2340      	movs	r3, #64	; 0x40
 80042f6:	eba0 000a 	sub.w	r0, r0, sl
 80042fa:	fa03 f000 	lsl.w	r0, r3, r0
 80042fe:	9b04      	ldr	r3, [sp, #16]
 8004300:	4303      	orrs	r3, r0
 8004302:	3401      	adds	r4, #1
 8004304:	9304      	str	r3, [sp, #16]
 8004306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800430a:	4826      	ldr	r0, [pc, #152]	; (80043a4 <_svfiprintf_r+0x1f0>)
 800430c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004310:	2206      	movs	r2, #6
 8004312:	f7fb ff65 	bl	80001e0 <memchr>
 8004316:	2800      	cmp	r0, #0
 8004318:	d038      	beq.n	800438c <_svfiprintf_r+0x1d8>
 800431a:	4b23      	ldr	r3, [pc, #140]	; (80043a8 <_svfiprintf_r+0x1f4>)
 800431c:	bb1b      	cbnz	r3, 8004366 <_svfiprintf_r+0x1b2>
 800431e:	9b03      	ldr	r3, [sp, #12]
 8004320:	3307      	adds	r3, #7
 8004322:	f023 0307 	bic.w	r3, r3, #7
 8004326:	3308      	adds	r3, #8
 8004328:	9303      	str	r3, [sp, #12]
 800432a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800432c:	4433      	add	r3, r6
 800432e:	9309      	str	r3, [sp, #36]	; 0x24
 8004330:	e767      	b.n	8004202 <_svfiprintf_r+0x4e>
 8004332:	fb0c 3202 	mla	r2, ip, r2, r3
 8004336:	460c      	mov	r4, r1
 8004338:	2001      	movs	r0, #1
 800433a:	e7a5      	b.n	8004288 <_svfiprintf_r+0xd4>
 800433c:	2300      	movs	r3, #0
 800433e:	3401      	adds	r4, #1
 8004340:	9305      	str	r3, [sp, #20]
 8004342:	4619      	mov	r1, r3
 8004344:	f04f 0c0a 	mov.w	ip, #10
 8004348:	4620      	mov	r0, r4
 800434a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800434e:	3a30      	subs	r2, #48	; 0x30
 8004350:	2a09      	cmp	r2, #9
 8004352:	d903      	bls.n	800435c <_svfiprintf_r+0x1a8>
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0c5      	beq.n	80042e4 <_svfiprintf_r+0x130>
 8004358:	9105      	str	r1, [sp, #20]
 800435a:	e7c3      	b.n	80042e4 <_svfiprintf_r+0x130>
 800435c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004360:	4604      	mov	r4, r0
 8004362:	2301      	movs	r3, #1
 8004364:	e7f0      	b.n	8004348 <_svfiprintf_r+0x194>
 8004366:	ab03      	add	r3, sp, #12
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	462a      	mov	r2, r5
 800436c:	4b0f      	ldr	r3, [pc, #60]	; (80043ac <_svfiprintf_r+0x1f8>)
 800436e:	a904      	add	r1, sp, #16
 8004370:	4638      	mov	r0, r7
 8004372:	f3af 8000 	nop.w
 8004376:	1c42      	adds	r2, r0, #1
 8004378:	4606      	mov	r6, r0
 800437a:	d1d6      	bne.n	800432a <_svfiprintf_r+0x176>
 800437c:	89ab      	ldrh	r3, [r5, #12]
 800437e:	065b      	lsls	r3, r3, #25
 8004380:	f53f af2c 	bmi.w	80041dc <_svfiprintf_r+0x28>
 8004384:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004386:	b01d      	add	sp, #116	; 0x74
 8004388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800438c:	ab03      	add	r3, sp, #12
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	462a      	mov	r2, r5
 8004392:	4b06      	ldr	r3, [pc, #24]	; (80043ac <_svfiprintf_r+0x1f8>)
 8004394:	a904      	add	r1, sp, #16
 8004396:	4638      	mov	r0, r7
 8004398:	f000 f87a 	bl	8004490 <_printf_i>
 800439c:	e7eb      	b.n	8004376 <_svfiprintf_r+0x1c2>
 800439e:	bf00      	nop
 80043a0:	0800584c 	.word	0x0800584c
 80043a4:	08005856 	.word	0x08005856
 80043a8:	00000000 	.word	0x00000000
 80043ac:	080040fd 	.word	0x080040fd
 80043b0:	08005852 	.word	0x08005852

080043b4 <_printf_common>:
 80043b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043b8:	4616      	mov	r6, r2
 80043ba:	4699      	mov	r9, r3
 80043bc:	688a      	ldr	r2, [r1, #8]
 80043be:	690b      	ldr	r3, [r1, #16]
 80043c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043c4:	4293      	cmp	r3, r2
 80043c6:	bfb8      	it	lt
 80043c8:	4613      	movlt	r3, r2
 80043ca:	6033      	str	r3, [r6, #0]
 80043cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043d0:	4607      	mov	r7, r0
 80043d2:	460c      	mov	r4, r1
 80043d4:	b10a      	cbz	r2, 80043da <_printf_common+0x26>
 80043d6:	3301      	adds	r3, #1
 80043d8:	6033      	str	r3, [r6, #0]
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	0699      	lsls	r1, r3, #26
 80043de:	bf42      	ittt	mi
 80043e0:	6833      	ldrmi	r3, [r6, #0]
 80043e2:	3302      	addmi	r3, #2
 80043e4:	6033      	strmi	r3, [r6, #0]
 80043e6:	6825      	ldr	r5, [r4, #0]
 80043e8:	f015 0506 	ands.w	r5, r5, #6
 80043ec:	d106      	bne.n	80043fc <_printf_common+0x48>
 80043ee:	f104 0a19 	add.w	sl, r4, #25
 80043f2:	68e3      	ldr	r3, [r4, #12]
 80043f4:	6832      	ldr	r2, [r6, #0]
 80043f6:	1a9b      	subs	r3, r3, r2
 80043f8:	42ab      	cmp	r3, r5
 80043fa:	dc26      	bgt.n	800444a <_printf_common+0x96>
 80043fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004400:	1e13      	subs	r3, r2, #0
 8004402:	6822      	ldr	r2, [r4, #0]
 8004404:	bf18      	it	ne
 8004406:	2301      	movne	r3, #1
 8004408:	0692      	lsls	r2, r2, #26
 800440a:	d42b      	bmi.n	8004464 <_printf_common+0xb0>
 800440c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004410:	4649      	mov	r1, r9
 8004412:	4638      	mov	r0, r7
 8004414:	47c0      	blx	r8
 8004416:	3001      	adds	r0, #1
 8004418:	d01e      	beq.n	8004458 <_printf_common+0xa4>
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	68e5      	ldr	r5, [r4, #12]
 800441e:	6832      	ldr	r2, [r6, #0]
 8004420:	f003 0306 	and.w	r3, r3, #6
 8004424:	2b04      	cmp	r3, #4
 8004426:	bf08      	it	eq
 8004428:	1aad      	subeq	r5, r5, r2
 800442a:	68a3      	ldr	r3, [r4, #8]
 800442c:	6922      	ldr	r2, [r4, #16]
 800442e:	bf0c      	ite	eq
 8004430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004434:	2500      	movne	r5, #0
 8004436:	4293      	cmp	r3, r2
 8004438:	bfc4      	itt	gt
 800443a:	1a9b      	subgt	r3, r3, r2
 800443c:	18ed      	addgt	r5, r5, r3
 800443e:	2600      	movs	r6, #0
 8004440:	341a      	adds	r4, #26
 8004442:	42b5      	cmp	r5, r6
 8004444:	d11a      	bne.n	800447c <_printf_common+0xc8>
 8004446:	2000      	movs	r0, #0
 8004448:	e008      	b.n	800445c <_printf_common+0xa8>
 800444a:	2301      	movs	r3, #1
 800444c:	4652      	mov	r2, sl
 800444e:	4649      	mov	r1, r9
 8004450:	4638      	mov	r0, r7
 8004452:	47c0      	blx	r8
 8004454:	3001      	adds	r0, #1
 8004456:	d103      	bne.n	8004460 <_printf_common+0xac>
 8004458:	f04f 30ff 	mov.w	r0, #4294967295
 800445c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004460:	3501      	adds	r5, #1
 8004462:	e7c6      	b.n	80043f2 <_printf_common+0x3e>
 8004464:	18e1      	adds	r1, r4, r3
 8004466:	1c5a      	adds	r2, r3, #1
 8004468:	2030      	movs	r0, #48	; 0x30
 800446a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800446e:	4422      	add	r2, r4
 8004470:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004474:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004478:	3302      	adds	r3, #2
 800447a:	e7c7      	b.n	800440c <_printf_common+0x58>
 800447c:	2301      	movs	r3, #1
 800447e:	4622      	mov	r2, r4
 8004480:	4649      	mov	r1, r9
 8004482:	4638      	mov	r0, r7
 8004484:	47c0      	blx	r8
 8004486:	3001      	adds	r0, #1
 8004488:	d0e6      	beq.n	8004458 <_printf_common+0xa4>
 800448a:	3601      	adds	r6, #1
 800448c:	e7d9      	b.n	8004442 <_printf_common+0x8e>
	...

08004490 <_printf_i>:
 8004490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004494:	460c      	mov	r4, r1
 8004496:	4691      	mov	r9, r2
 8004498:	7e27      	ldrb	r7, [r4, #24]
 800449a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800449c:	2f78      	cmp	r7, #120	; 0x78
 800449e:	4680      	mov	r8, r0
 80044a0:	469a      	mov	sl, r3
 80044a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044a6:	d807      	bhi.n	80044b8 <_printf_i+0x28>
 80044a8:	2f62      	cmp	r7, #98	; 0x62
 80044aa:	d80a      	bhi.n	80044c2 <_printf_i+0x32>
 80044ac:	2f00      	cmp	r7, #0
 80044ae:	f000 80d8 	beq.w	8004662 <_printf_i+0x1d2>
 80044b2:	2f58      	cmp	r7, #88	; 0x58
 80044b4:	f000 80a3 	beq.w	80045fe <_printf_i+0x16e>
 80044b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80044bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044c0:	e03a      	b.n	8004538 <_printf_i+0xa8>
 80044c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044c6:	2b15      	cmp	r3, #21
 80044c8:	d8f6      	bhi.n	80044b8 <_printf_i+0x28>
 80044ca:	a001      	add	r0, pc, #4	; (adr r0, 80044d0 <_printf_i+0x40>)
 80044cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80044d0:	08004529 	.word	0x08004529
 80044d4:	0800453d 	.word	0x0800453d
 80044d8:	080044b9 	.word	0x080044b9
 80044dc:	080044b9 	.word	0x080044b9
 80044e0:	080044b9 	.word	0x080044b9
 80044e4:	080044b9 	.word	0x080044b9
 80044e8:	0800453d 	.word	0x0800453d
 80044ec:	080044b9 	.word	0x080044b9
 80044f0:	080044b9 	.word	0x080044b9
 80044f4:	080044b9 	.word	0x080044b9
 80044f8:	080044b9 	.word	0x080044b9
 80044fc:	08004649 	.word	0x08004649
 8004500:	0800456d 	.word	0x0800456d
 8004504:	0800462b 	.word	0x0800462b
 8004508:	080044b9 	.word	0x080044b9
 800450c:	080044b9 	.word	0x080044b9
 8004510:	0800466b 	.word	0x0800466b
 8004514:	080044b9 	.word	0x080044b9
 8004518:	0800456d 	.word	0x0800456d
 800451c:	080044b9 	.word	0x080044b9
 8004520:	080044b9 	.word	0x080044b9
 8004524:	08004633 	.word	0x08004633
 8004528:	680b      	ldr	r3, [r1, #0]
 800452a:	1d1a      	adds	r2, r3, #4
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	600a      	str	r2, [r1, #0]
 8004530:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004534:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004538:	2301      	movs	r3, #1
 800453a:	e0a3      	b.n	8004684 <_printf_i+0x1f4>
 800453c:	6825      	ldr	r5, [r4, #0]
 800453e:	6808      	ldr	r0, [r1, #0]
 8004540:	062e      	lsls	r6, r5, #24
 8004542:	f100 0304 	add.w	r3, r0, #4
 8004546:	d50a      	bpl.n	800455e <_printf_i+0xce>
 8004548:	6805      	ldr	r5, [r0, #0]
 800454a:	600b      	str	r3, [r1, #0]
 800454c:	2d00      	cmp	r5, #0
 800454e:	da03      	bge.n	8004558 <_printf_i+0xc8>
 8004550:	232d      	movs	r3, #45	; 0x2d
 8004552:	426d      	negs	r5, r5
 8004554:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004558:	485e      	ldr	r0, [pc, #376]	; (80046d4 <_printf_i+0x244>)
 800455a:	230a      	movs	r3, #10
 800455c:	e019      	b.n	8004592 <_printf_i+0x102>
 800455e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004562:	6805      	ldr	r5, [r0, #0]
 8004564:	600b      	str	r3, [r1, #0]
 8004566:	bf18      	it	ne
 8004568:	b22d      	sxthne	r5, r5
 800456a:	e7ef      	b.n	800454c <_printf_i+0xbc>
 800456c:	680b      	ldr	r3, [r1, #0]
 800456e:	6825      	ldr	r5, [r4, #0]
 8004570:	1d18      	adds	r0, r3, #4
 8004572:	6008      	str	r0, [r1, #0]
 8004574:	0628      	lsls	r0, r5, #24
 8004576:	d501      	bpl.n	800457c <_printf_i+0xec>
 8004578:	681d      	ldr	r5, [r3, #0]
 800457a:	e002      	b.n	8004582 <_printf_i+0xf2>
 800457c:	0669      	lsls	r1, r5, #25
 800457e:	d5fb      	bpl.n	8004578 <_printf_i+0xe8>
 8004580:	881d      	ldrh	r5, [r3, #0]
 8004582:	4854      	ldr	r0, [pc, #336]	; (80046d4 <_printf_i+0x244>)
 8004584:	2f6f      	cmp	r7, #111	; 0x6f
 8004586:	bf0c      	ite	eq
 8004588:	2308      	moveq	r3, #8
 800458a:	230a      	movne	r3, #10
 800458c:	2100      	movs	r1, #0
 800458e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004592:	6866      	ldr	r6, [r4, #4]
 8004594:	60a6      	str	r6, [r4, #8]
 8004596:	2e00      	cmp	r6, #0
 8004598:	bfa2      	ittt	ge
 800459a:	6821      	ldrge	r1, [r4, #0]
 800459c:	f021 0104 	bicge.w	r1, r1, #4
 80045a0:	6021      	strge	r1, [r4, #0]
 80045a2:	b90d      	cbnz	r5, 80045a8 <_printf_i+0x118>
 80045a4:	2e00      	cmp	r6, #0
 80045a6:	d04d      	beq.n	8004644 <_printf_i+0x1b4>
 80045a8:	4616      	mov	r6, r2
 80045aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80045ae:	fb03 5711 	mls	r7, r3, r1, r5
 80045b2:	5dc7      	ldrb	r7, [r0, r7]
 80045b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045b8:	462f      	mov	r7, r5
 80045ba:	42bb      	cmp	r3, r7
 80045bc:	460d      	mov	r5, r1
 80045be:	d9f4      	bls.n	80045aa <_printf_i+0x11a>
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d10b      	bne.n	80045dc <_printf_i+0x14c>
 80045c4:	6823      	ldr	r3, [r4, #0]
 80045c6:	07df      	lsls	r7, r3, #31
 80045c8:	d508      	bpl.n	80045dc <_printf_i+0x14c>
 80045ca:	6923      	ldr	r3, [r4, #16]
 80045cc:	6861      	ldr	r1, [r4, #4]
 80045ce:	4299      	cmp	r1, r3
 80045d0:	bfde      	ittt	le
 80045d2:	2330      	movle	r3, #48	; 0x30
 80045d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045dc:	1b92      	subs	r2, r2, r6
 80045de:	6122      	str	r2, [r4, #16]
 80045e0:	f8cd a000 	str.w	sl, [sp]
 80045e4:	464b      	mov	r3, r9
 80045e6:	aa03      	add	r2, sp, #12
 80045e8:	4621      	mov	r1, r4
 80045ea:	4640      	mov	r0, r8
 80045ec:	f7ff fee2 	bl	80043b4 <_printf_common>
 80045f0:	3001      	adds	r0, #1
 80045f2:	d14c      	bne.n	800468e <_printf_i+0x1fe>
 80045f4:	f04f 30ff 	mov.w	r0, #4294967295
 80045f8:	b004      	add	sp, #16
 80045fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045fe:	4835      	ldr	r0, [pc, #212]	; (80046d4 <_printf_i+0x244>)
 8004600:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	680e      	ldr	r6, [r1, #0]
 8004608:	061f      	lsls	r7, r3, #24
 800460a:	f856 5b04 	ldr.w	r5, [r6], #4
 800460e:	600e      	str	r6, [r1, #0]
 8004610:	d514      	bpl.n	800463c <_printf_i+0x1ac>
 8004612:	07d9      	lsls	r1, r3, #31
 8004614:	bf44      	itt	mi
 8004616:	f043 0320 	orrmi.w	r3, r3, #32
 800461a:	6023      	strmi	r3, [r4, #0]
 800461c:	b91d      	cbnz	r5, 8004626 <_printf_i+0x196>
 800461e:	6823      	ldr	r3, [r4, #0]
 8004620:	f023 0320 	bic.w	r3, r3, #32
 8004624:	6023      	str	r3, [r4, #0]
 8004626:	2310      	movs	r3, #16
 8004628:	e7b0      	b.n	800458c <_printf_i+0xfc>
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	f043 0320 	orr.w	r3, r3, #32
 8004630:	6023      	str	r3, [r4, #0]
 8004632:	2378      	movs	r3, #120	; 0x78
 8004634:	4828      	ldr	r0, [pc, #160]	; (80046d8 <_printf_i+0x248>)
 8004636:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800463a:	e7e3      	b.n	8004604 <_printf_i+0x174>
 800463c:	065e      	lsls	r6, r3, #25
 800463e:	bf48      	it	mi
 8004640:	b2ad      	uxthmi	r5, r5
 8004642:	e7e6      	b.n	8004612 <_printf_i+0x182>
 8004644:	4616      	mov	r6, r2
 8004646:	e7bb      	b.n	80045c0 <_printf_i+0x130>
 8004648:	680b      	ldr	r3, [r1, #0]
 800464a:	6826      	ldr	r6, [r4, #0]
 800464c:	6960      	ldr	r0, [r4, #20]
 800464e:	1d1d      	adds	r5, r3, #4
 8004650:	600d      	str	r5, [r1, #0]
 8004652:	0635      	lsls	r5, r6, #24
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	d501      	bpl.n	800465c <_printf_i+0x1cc>
 8004658:	6018      	str	r0, [r3, #0]
 800465a:	e002      	b.n	8004662 <_printf_i+0x1d2>
 800465c:	0671      	lsls	r1, r6, #25
 800465e:	d5fb      	bpl.n	8004658 <_printf_i+0x1c8>
 8004660:	8018      	strh	r0, [r3, #0]
 8004662:	2300      	movs	r3, #0
 8004664:	6123      	str	r3, [r4, #16]
 8004666:	4616      	mov	r6, r2
 8004668:	e7ba      	b.n	80045e0 <_printf_i+0x150>
 800466a:	680b      	ldr	r3, [r1, #0]
 800466c:	1d1a      	adds	r2, r3, #4
 800466e:	600a      	str	r2, [r1, #0]
 8004670:	681e      	ldr	r6, [r3, #0]
 8004672:	6862      	ldr	r2, [r4, #4]
 8004674:	2100      	movs	r1, #0
 8004676:	4630      	mov	r0, r6
 8004678:	f7fb fdb2 	bl	80001e0 <memchr>
 800467c:	b108      	cbz	r0, 8004682 <_printf_i+0x1f2>
 800467e:	1b80      	subs	r0, r0, r6
 8004680:	6060      	str	r0, [r4, #4]
 8004682:	6863      	ldr	r3, [r4, #4]
 8004684:	6123      	str	r3, [r4, #16]
 8004686:	2300      	movs	r3, #0
 8004688:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800468c:	e7a8      	b.n	80045e0 <_printf_i+0x150>
 800468e:	6923      	ldr	r3, [r4, #16]
 8004690:	4632      	mov	r2, r6
 8004692:	4649      	mov	r1, r9
 8004694:	4640      	mov	r0, r8
 8004696:	47d0      	blx	sl
 8004698:	3001      	adds	r0, #1
 800469a:	d0ab      	beq.n	80045f4 <_printf_i+0x164>
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	079b      	lsls	r3, r3, #30
 80046a0:	d413      	bmi.n	80046ca <_printf_i+0x23a>
 80046a2:	68e0      	ldr	r0, [r4, #12]
 80046a4:	9b03      	ldr	r3, [sp, #12]
 80046a6:	4298      	cmp	r0, r3
 80046a8:	bfb8      	it	lt
 80046aa:	4618      	movlt	r0, r3
 80046ac:	e7a4      	b.n	80045f8 <_printf_i+0x168>
 80046ae:	2301      	movs	r3, #1
 80046b0:	4632      	mov	r2, r6
 80046b2:	4649      	mov	r1, r9
 80046b4:	4640      	mov	r0, r8
 80046b6:	47d0      	blx	sl
 80046b8:	3001      	adds	r0, #1
 80046ba:	d09b      	beq.n	80045f4 <_printf_i+0x164>
 80046bc:	3501      	adds	r5, #1
 80046be:	68e3      	ldr	r3, [r4, #12]
 80046c0:	9903      	ldr	r1, [sp, #12]
 80046c2:	1a5b      	subs	r3, r3, r1
 80046c4:	42ab      	cmp	r3, r5
 80046c6:	dcf2      	bgt.n	80046ae <_printf_i+0x21e>
 80046c8:	e7eb      	b.n	80046a2 <_printf_i+0x212>
 80046ca:	2500      	movs	r5, #0
 80046cc:	f104 0619 	add.w	r6, r4, #25
 80046d0:	e7f5      	b.n	80046be <_printf_i+0x22e>
 80046d2:	bf00      	nop
 80046d4:	0800585d 	.word	0x0800585d
 80046d8:	0800586e 	.word	0x0800586e

080046dc <memcpy>:
 80046dc:	440a      	add	r2, r1
 80046de:	4291      	cmp	r1, r2
 80046e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80046e4:	d100      	bne.n	80046e8 <memcpy+0xc>
 80046e6:	4770      	bx	lr
 80046e8:	b510      	push	{r4, lr}
 80046ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046f2:	4291      	cmp	r1, r2
 80046f4:	d1f9      	bne.n	80046ea <memcpy+0xe>
 80046f6:	bd10      	pop	{r4, pc}

080046f8 <memmove>:
 80046f8:	4288      	cmp	r0, r1
 80046fa:	b510      	push	{r4, lr}
 80046fc:	eb01 0402 	add.w	r4, r1, r2
 8004700:	d902      	bls.n	8004708 <memmove+0x10>
 8004702:	4284      	cmp	r4, r0
 8004704:	4623      	mov	r3, r4
 8004706:	d807      	bhi.n	8004718 <memmove+0x20>
 8004708:	1e43      	subs	r3, r0, #1
 800470a:	42a1      	cmp	r1, r4
 800470c:	d008      	beq.n	8004720 <memmove+0x28>
 800470e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004712:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004716:	e7f8      	b.n	800470a <memmove+0x12>
 8004718:	4402      	add	r2, r0
 800471a:	4601      	mov	r1, r0
 800471c:	428a      	cmp	r2, r1
 800471e:	d100      	bne.n	8004722 <memmove+0x2a>
 8004720:	bd10      	pop	{r4, pc}
 8004722:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004726:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800472a:	e7f7      	b.n	800471c <memmove+0x24>

0800472c <_free_r>:
 800472c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800472e:	2900      	cmp	r1, #0
 8004730:	d048      	beq.n	80047c4 <_free_r+0x98>
 8004732:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004736:	9001      	str	r0, [sp, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	f1a1 0404 	sub.w	r4, r1, #4
 800473e:	bfb8      	it	lt
 8004740:	18e4      	addlt	r4, r4, r3
 8004742:	f000 f8d3 	bl	80048ec <__malloc_lock>
 8004746:	4a20      	ldr	r2, [pc, #128]	; (80047c8 <_free_r+0x9c>)
 8004748:	9801      	ldr	r0, [sp, #4]
 800474a:	6813      	ldr	r3, [r2, #0]
 800474c:	4615      	mov	r5, r2
 800474e:	b933      	cbnz	r3, 800475e <_free_r+0x32>
 8004750:	6063      	str	r3, [r4, #4]
 8004752:	6014      	str	r4, [r2, #0]
 8004754:	b003      	add	sp, #12
 8004756:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800475a:	f000 b8cd 	b.w	80048f8 <__malloc_unlock>
 800475e:	42a3      	cmp	r3, r4
 8004760:	d90b      	bls.n	800477a <_free_r+0x4e>
 8004762:	6821      	ldr	r1, [r4, #0]
 8004764:	1862      	adds	r2, r4, r1
 8004766:	4293      	cmp	r3, r2
 8004768:	bf04      	itt	eq
 800476a:	681a      	ldreq	r2, [r3, #0]
 800476c:	685b      	ldreq	r3, [r3, #4]
 800476e:	6063      	str	r3, [r4, #4]
 8004770:	bf04      	itt	eq
 8004772:	1852      	addeq	r2, r2, r1
 8004774:	6022      	streq	r2, [r4, #0]
 8004776:	602c      	str	r4, [r5, #0]
 8004778:	e7ec      	b.n	8004754 <_free_r+0x28>
 800477a:	461a      	mov	r2, r3
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	b10b      	cbz	r3, 8004784 <_free_r+0x58>
 8004780:	42a3      	cmp	r3, r4
 8004782:	d9fa      	bls.n	800477a <_free_r+0x4e>
 8004784:	6811      	ldr	r1, [r2, #0]
 8004786:	1855      	adds	r5, r2, r1
 8004788:	42a5      	cmp	r5, r4
 800478a:	d10b      	bne.n	80047a4 <_free_r+0x78>
 800478c:	6824      	ldr	r4, [r4, #0]
 800478e:	4421      	add	r1, r4
 8004790:	1854      	adds	r4, r2, r1
 8004792:	42a3      	cmp	r3, r4
 8004794:	6011      	str	r1, [r2, #0]
 8004796:	d1dd      	bne.n	8004754 <_free_r+0x28>
 8004798:	681c      	ldr	r4, [r3, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	6053      	str	r3, [r2, #4]
 800479e:	4421      	add	r1, r4
 80047a0:	6011      	str	r1, [r2, #0]
 80047a2:	e7d7      	b.n	8004754 <_free_r+0x28>
 80047a4:	d902      	bls.n	80047ac <_free_r+0x80>
 80047a6:	230c      	movs	r3, #12
 80047a8:	6003      	str	r3, [r0, #0]
 80047aa:	e7d3      	b.n	8004754 <_free_r+0x28>
 80047ac:	6825      	ldr	r5, [r4, #0]
 80047ae:	1961      	adds	r1, r4, r5
 80047b0:	428b      	cmp	r3, r1
 80047b2:	bf04      	itt	eq
 80047b4:	6819      	ldreq	r1, [r3, #0]
 80047b6:	685b      	ldreq	r3, [r3, #4]
 80047b8:	6063      	str	r3, [r4, #4]
 80047ba:	bf04      	itt	eq
 80047bc:	1949      	addeq	r1, r1, r5
 80047be:	6021      	streq	r1, [r4, #0]
 80047c0:	6054      	str	r4, [r2, #4]
 80047c2:	e7c7      	b.n	8004754 <_free_r+0x28>
 80047c4:	b003      	add	sp, #12
 80047c6:	bd30      	pop	{r4, r5, pc}
 80047c8:	20000530 	.word	0x20000530

080047cc <_malloc_r>:
 80047cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ce:	1ccd      	adds	r5, r1, #3
 80047d0:	f025 0503 	bic.w	r5, r5, #3
 80047d4:	3508      	adds	r5, #8
 80047d6:	2d0c      	cmp	r5, #12
 80047d8:	bf38      	it	cc
 80047da:	250c      	movcc	r5, #12
 80047dc:	2d00      	cmp	r5, #0
 80047de:	4606      	mov	r6, r0
 80047e0:	db01      	blt.n	80047e6 <_malloc_r+0x1a>
 80047e2:	42a9      	cmp	r1, r5
 80047e4:	d903      	bls.n	80047ee <_malloc_r+0x22>
 80047e6:	230c      	movs	r3, #12
 80047e8:	6033      	str	r3, [r6, #0]
 80047ea:	2000      	movs	r0, #0
 80047ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047ee:	f000 f87d 	bl	80048ec <__malloc_lock>
 80047f2:	4921      	ldr	r1, [pc, #132]	; (8004878 <_malloc_r+0xac>)
 80047f4:	680a      	ldr	r2, [r1, #0]
 80047f6:	4614      	mov	r4, r2
 80047f8:	b99c      	cbnz	r4, 8004822 <_malloc_r+0x56>
 80047fa:	4f20      	ldr	r7, [pc, #128]	; (800487c <_malloc_r+0xb0>)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	b923      	cbnz	r3, 800480a <_malloc_r+0x3e>
 8004800:	4621      	mov	r1, r4
 8004802:	4630      	mov	r0, r6
 8004804:	f000 f862 	bl	80048cc <_sbrk_r>
 8004808:	6038      	str	r0, [r7, #0]
 800480a:	4629      	mov	r1, r5
 800480c:	4630      	mov	r0, r6
 800480e:	f000 f85d 	bl	80048cc <_sbrk_r>
 8004812:	1c43      	adds	r3, r0, #1
 8004814:	d123      	bne.n	800485e <_malloc_r+0x92>
 8004816:	230c      	movs	r3, #12
 8004818:	6033      	str	r3, [r6, #0]
 800481a:	4630      	mov	r0, r6
 800481c:	f000 f86c 	bl	80048f8 <__malloc_unlock>
 8004820:	e7e3      	b.n	80047ea <_malloc_r+0x1e>
 8004822:	6823      	ldr	r3, [r4, #0]
 8004824:	1b5b      	subs	r3, r3, r5
 8004826:	d417      	bmi.n	8004858 <_malloc_r+0x8c>
 8004828:	2b0b      	cmp	r3, #11
 800482a:	d903      	bls.n	8004834 <_malloc_r+0x68>
 800482c:	6023      	str	r3, [r4, #0]
 800482e:	441c      	add	r4, r3
 8004830:	6025      	str	r5, [r4, #0]
 8004832:	e004      	b.n	800483e <_malloc_r+0x72>
 8004834:	6863      	ldr	r3, [r4, #4]
 8004836:	42a2      	cmp	r2, r4
 8004838:	bf0c      	ite	eq
 800483a:	600b      	streq	r3, [r1, #0]
 800483c:	6053      	strne	r3, [r2, #4]
 800483e:	4630      	mov	r0, r6
 8004840:	f000 f85a 	bl	80048f8 <__malloc_unlock>
 8004844:	f104 000b 	add.w	r0, r4, #11
 8004848:	1d23      	adds	r3, r4, #4
 800484a:	f020 0007 	bic.w	r0, r0, #7
 800484e:	1ac2      	subs	r2, r0, r3
 8004850:	d0cc      	beq.n	80047ec <_malloc_r+0x20>
 8004852:	1a1b      	subs	r3, r3, r0
 8004854:	50a3      	str	r3, [r4, r2]
 8004856:	e7c9      	b.n	80047ec <_malloc_r+0x20>
 8004858:	4622      	mov	r2, r4
 800485a:	6864      	ldr	r4, [r4, #4]
 800485c:	e7cc      	b.n	80047f8 <_malloc_r+0x2c>
 800485e:	1cc4      	adds	r4, r0, #3
 8004860:	f024 0403 	bic.w	r4, r4, #3
 8004864:	42a0      	cmp	r0, r4
 8004866:	d0e3      	beq.n	8004830 <_malloc_r+0x64>
 8004868:	1a21      	subs	r1, r4, r0
 800486a:	4630      	mov	r0, r6
 800486c:	f000 f82e 	bl	80048cc <_sbrk_r>
 8004870:	3001      	adds	r0, #1
 8004872:	d1dd      	bne.n	8004830 <_malloc_r+0x64>
 8004874:	e7cf      	b.n	8004816 <_malloc_r+0x4a>
 8004876:	bf00      	nop
 8004878:	20000530 	.word	0x20000530
 800487c:	20000534 	.word	0x20000534

08004880 <_realloc_r>:
 8004880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004882:	4607      	mov	r7, r0
 8004884:	4614      	mov	r4, r2
 8004886:	460e      	mov	r6, r1
 8004888:	b921      	cbnz	r1, 8004894 <_realloc_r+0x14>
 800488a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800488e:	4611      	mov	r1, r2
 8004890:	f7ff bf9c 	b.w	80047cc <_malloc_r>
 8004894:	b922      	cbnz	r2, 80048a0 <_realloc_r+0x20>
 8004896:	f7ff ff49 	bl	800472c <_free_r>
 800489a:	4625      	mov	r5, r4
 800489c:	4628      	mov	r0, r5
 800489e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048a0:	f000 f830 	bl	8004904 <_malloc_usable_size_r>
 80048a4:	42a0      	cmp	r0, r4
 80048a6:	d20f      	bcs.n	80048c8 <_realloc_r+0x48>
 80048a8:	4621      	mov	r1, r4
 80048aa:	4638      	mov	r0, r7
 80048ac:	f7ff ff8e 	bl	80047cc <_malloc_r>
 80048b0:	4605      	mov	r5, r0
 80048b2:	2800      	cmp	r0, #0
 80048b4:	d0f2      	beq.n	800489c <_realloc_r+0x1c>
 80048b6:	4631      	mov	r1, r6
 80048b8:	4622      	mov	r2, r4
 80048ba:	f7ff ff0f 	bl	80046dc <memcpy>
 80048be:	4631      	mov	r1, r6
 80048c0:	4638      	mov	r0, r7
 80048c2:	f7ff ff33 	bl	800472c <_free_r>
 80048c6:	e7e9      	b.n	800489c <_realloc_r+0x1c>
 80048c8:	4635      	mov	r5, r6
 80048ca:	e7e7      	b.n	800489c <_realloc_r+0x1c>

080048cc <_sbrk_r>:
 80048cc:	b538      	push	{r3, r4, r5, lr}
 80048ce:	4d06      	ldr	r5, [pc, #24]	; (80048e8 <_sbrk_r+0x1c>)
 80048d0:	2300      	movs	r3, #0
 80048d2:	4604      	mov	r4, r0
 80048d4:	4608      	mov	r0, r1
 80048d6:	602b      	str	r3, [r5, #0]
 80048d8:	f7fc feec 	bl	80016b4 <_sbrk>
 80048dc:	1c43      	adds	r3, r0, #1
 80048de:	d102      	bne.n	80048e6 <_sbrk_r+0x1a>
 80048e0:	682b      	ldr	r3, [r5, #0]
 80048e2:	b103      	cbz	r3, 80048e6 <_sbrk_r+0x1a>
 80048e4:	6023      	str	r3, [r4, #0]
 80048e6:	bd38      	pop	{r3, r4, r5, pc}
 80048e8:	200005fc 	.word	0x200005fc

080048ec <__malloc_lock>:
 80048ec:	4801      	ldr	r0, [pc, #4]	; (80048f4 <__malloc_lock+0x8>)
 80048ee:	f000 b811 	b.w	8004914 <__retarget_lock_acquire_recursive>
 80048f2:	bf00      	nop
 80048f4:	20000604 	.word	0x20000604

080048f8 <__malloc_unlock>:
 80048f8:	4801      	ldr	r0, [pc, #4]	; (8004900 <__malloc_unlock+0x8>)
 80048fa:	f000 b80c 	b.w	8004916 <__retarget_lock_release_recursive>
 80048fe:	bf00      	nop
 8004900:	20000604 	.word	0x20000604

08004904 <_malloc_usable_size_r>:
 8004904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004908:	1f18      	subs	r0, r3, #4
 800490a:	2b00      	cmp	r3, #0
 800490c:	bfbc      	itt	lt
 800490e:	580b      	ldrlt	r3, [r1, r0]
 8004910:	18c0      	addlt	r0, r0, r3
 8004912:	4770      	bx	lr

08004914 <__retarget_lock_acquire_recursive>:
 8004914:	4770      	bx	lr

08004916 <__retarget_lock_release_recursive>:
 8004916:	4770      	bx	lr

08004918 <_init>:
 8004918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491a:	bf00      	nop
 800491c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800491e:	bc08      	pop	{r3}
 8004920:	469e      	mov	lr, r3
 8004922:	4770      	bx	lr

08004924 <_fini>:
 8004924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004926:	bf00      	nop
 8004928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800492a:	bc08      	pop	{r3}
 800492c:	469e      	mov	lr, r3
 800492e:	4770      	bx	lr
